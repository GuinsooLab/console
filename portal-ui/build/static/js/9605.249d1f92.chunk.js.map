{"version":3,"file":"static/js/9605.249d1f92.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/EditTenantLogsModal.tsx","screens/Console/Tenants/TenantDetails/TenantLogging.tsx"],"sourcesContent":["// This file is part of GuinsooLab Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { Button, Grid } from \"@mui/material\";\nimport api from \"../../../../common/api\";\nimport { IKeyValue, ITenant } from \"../ListTenants/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../utils\";\n\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IEditTenantLogsProps {\n  tenant: ITenant;\n  classes: any;\n  open: boolean;\n  onClose: (shouldReload: boolean) => void;\n  image: string;\n  labels: IKeyValue[];\n  annotations: IKeyValue[];\n  nodeSelector: IKeyValue[];\n  diskCapacityGB: number;\n  serviceAccountName: string;\n  dbImage: string;\n  dbInitImage: string;\n  dbLabels: IKeyValue[];\n  dbAnnotations: IKeyValue[];\n  dbNodeSelector: IKeyValue[];\n  dbServiceAccountName: string;\n  cpuRequest: string;\n  memRequest: string;\n  dbCPURequest: string;\n  dbMemRequest: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      \"& div\": {\n        flexGrow: 1,\n        width: \"100%\",\n      },\n    },\n    ...modalBasic,\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst EditTenantLogsModal = ({\n  tenant,\n  classes,\n  open,\n  onClose,\n  image,\n  labels,\n  annotations,\n  nodeSelector,\n  diskCapacityGB,\n  serviceAccountName,\n  dbLabels,\n  dbAnnotations,\n  dbNodeSelector,\n  dbImage,\n  dbInitImage,\n  dbServiceAccountName,\n  cpuRequest,\n  memRequest,\n  dbCPURequest,\n  dbMemRequest,\n}: IEditTenantLogsProps) => {\n  const dispatch = useAppDispatch();\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [newLabels, setNewLabels] = useState<IKeyValue[]>(\n    labels.length > 0 ? [...labels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newAnnotations, setNewAnnotations] = useState<IKeyValue[]>(\n    annotations.length > 0 ? [...annotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newNodeSelector, setNewNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector.length > 0 ? [...nodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newImage, setNewImage] = useState<string>(image);\n  const [newDiskCapacityGB, setNewDiskCapacityGB] =\n    useState<number>(diskCapacityGB);\n  const [newServiceAccountName, setNewServiceAccountName] = useState<string>(\n    serviceAccountName != null ? serviceAccountName : \"\"\n  );\n  const [newDbLabels, setNewDbLabels] = useState<IKeyValue[]>(\n    dbLabels.length > 0 ? [...dbLabels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbAnnotations, setNewDbAnnotations] = useState<IKeyValue[]>(\n    dbAnnotations.length > 0 ? [...dbAnnotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbNodeSelector, setNewDbNodeSelector] = useState<IKeyValue[]>(\n    dbNodeSelector.length > 0 ? [...dbNodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbImage, setNewDbImage] = useState<string>(dbImage);\n  const [newDbInitImage, setNewDbInitImage] = useState<string>(dbInitImage);\n  const [newDbServiceAccountName, setNewDbServiceAccountName] =\n    useState<string>(dbServiceAccountName != null ? dbServiceAccountName : \"\");\n  const [labelsError, setLabelsError] = useState<any>({});\n  const [annotationsError, setAnnotationsError] = useState<any>({});\n  const [nodeSelectorError, setNodeSelectorError] = useState<any>({});\n  const [dbLabelsError, setDbLabelsError] = useState<any>({});\n  const [dbAnnotationsError, setDbAnnotationsError] = useState<any>({});\n  const [dbNodeSelectorError, setDbNodeSelectorError] = useState<any>({});\n  const [newCPURequest, setNewCPURequest] = useState<string>(cpuRequest);\n  const [newMemRequest, setNewMemRequest] = useState<string>(\n    memRequest\n      ? Math.floor(parseInt(memRequest, 10) / 1000000000).toString()\n      : \"0\"\n  );\n  const [newDBCPURequest, setNewDBCPURequest] = useState<string>(dbCPURequest);\n  const [newDBMemRequest, setNewDBMemRequest] = useState<string>(\n    dbMemRequest\n      ? Math.floor(parseInt(dbMemRequest, 10) / 1000000000).toString()\n      : \"0\"\n  );\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  useEffect(() => {\n    let tenantLogValidation: IValidation[] = [];\n\n    tenantLogValidation.push({\n      fieldKey: `image`,\n      required: false,\n      value: newImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbImage`,\n      required: false,\n      value: newDbImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbInitImage`,\n      required: false,\n      value: newDbInitImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `diskCapacityGB`,\n      required: true,\n      value: newDiskCapacityGB as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage: \"Must be an integer between 0 and 10\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `serviceAccountName`,\n      required: false,\n      value: newServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbServiceAccountName`,\n      required: false,\n      value: newDbServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `cpuRequest`,\n      required: true,\n      value: newCPURequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value for number of CPUs requested\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `memRequest`,\n      required: true,\n      value: newMemRequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value (Gi) for memory requested\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbCPURequest`,\n      required: true,\n      value: newDBCPURequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value for number of  DB CPUs requested\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbMemRequest`,\n      required: true,\n      value: newDBMemRequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage:\n        \"Please enter an integer value (Gi) for DB memory requested\",\n    });\n\n    const commonVal = commonFormValidation(tenantLogValidation);\n    setValidationErrors(commonVal);\n  }, [\n    newImage,\n    newDbImage,\n    newDbInitImage,\n    newDiskCapacityGB,\n    newServiceAccountName,\n    newDbServiceAccountName,\n    newCPURequest,\n    newMemRequest,\n    newDBCPURequest,\n    newDBMemRequest,\n    setValidationErrors,\n  ]);\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(labelsError).length !== 0 ||\n      Object.keys(annotationsError).length !== 0 ||\n      Object.keys(nodeSelectorError).length !== 0 ||\n      Object.keys(dbLabelsError).length !== 0 ||\n      Object.keys(dbAnnotationsError).length !== 0 ||\n      Object.keys(dbNodeSelectorError).length !== 0\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <ModalWrapper\n      onClose={() => onClose(true)}\n      modalOpen={open}\n      title=\"Edit Logging\"\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          if (!checkValid()) {\n            dispatch(\n              setModalErrorSnackMessage({\n                errorMessage: \"Some fields have invalid values\",\n                detailedError: \"\",\n              })\n            );\n          } else {\n            api\n              .invoke(\n                \"PUT\",\n                `/api/v1/namespaces/${tenant.namespace}/tenants/${tenant.name}/log`,\n                {\n                  labels: trim(newLabels),\n                  annotations: trim(newAnnotations),\n                  nodeSelector: trim(newNodeSelector),\n                  image: newImage,\n                  diskCapacityGB: newDiskCapacityGB,\n                  serviceAccountName: newServiceAccountName,\n                  dbLabels: trim(newDbLabels),\n                  dbAnnotations: trim(newDbAnnotations),\n                  dbNodeSelector: trim(newDbNodeSelector),\n                  dbImage: newDbImage,\n                  dbInitImage: newDbInitImage,\n                  dbServiceAccountName: newDbServiceAccountName,\n                  logCPURequest: newCPURequest,\n                  logMemRequest: newMemRequest + \"Gi\",\n                  logDBCPURequest: newDBCPURequest,\n                  logDBMemRequest: newDBMemRequest + \"Gi\",\n                }\n              )\n              .then(() => {\n                onClose(true);\n              })\n              .catch((err: ErrorResponseHandler) => {});\n          }\n        }}\n      >\n        <Grid container>\n          <Grid xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h4>Logging API </h4>\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`image`}\n                label={\"Image\"}\n                placeholder={\"minio/operator:v4.4.22\"}\n                name={`image`}\n                value={newImage}\n                onChange={(e) => {\n                  setNewImage(e.target.value);\n                  cleanValidation(`image`);\n                }}\n                key={`image`}\n                error={validationErrors[`image`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`diskCapacityGB`}\n                label={\"Disk Capacity\"}\n                placeholder={\"Disk Capacity\"}\n                name={`diskCapacityGB`}\n                value={newDiskCapacityGB as any as string}\n                onChange={(e) => {\n                  setNewDiskCapacityGB(e.target.value as any as number);\n                  cleanValidation(`diskCapacityGB`);\n                }}\n                key={`diskCapacityGB`}\n                error={validationErrors[`diskCapacityGB`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`serviceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Service Account Name\"}\n                name={`serviceAccountName`}\n                value={newServiceAccountName}\n                onChange={(e) => {\n                  setNewServiceAccountName(e.target.value);\n                  cleanValidation(`serviceAccountName`);\n                }}\n                key={`serviceAccountName`}\n                error={validationErrors[`serviceAccountName`] || \"\"}\n              />\n            </Grid>\n\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`cpuRequest`}\n                label={\"CPU Request\"}\n                placeholder={\"CPU Request\"}\n                name={`cpuRequest`}\n                value={newCPURequest as any as string}\n                onChange={(e) => {\n                  setNewCPURequest(e.target.value as any as string);\n                  cleanValidation(`cpuRequest`);\n                }}\n                key={`cpuRequest`}\n                error={validationErrors[`cpuRequest`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`memRequest`}\n                label={\"Memory request\"}\n                placeholder={\"Memory request\"}\n                name={`memRequest`}\n                value={newMemRequest}\n                onChange={(e) => {\n                  setNewMemRequest(e.target.value as any as string);\n                  cleanValidation(`memRequest`);\n                }}\n                key={`memRequest`}\n                error={validationErrors[`memRequest`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newLabels}\n                setNewValues={setNewLabels}\n                paramName={\"Labels\"}\n                error={labelsError}\n                setError={setLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newAnnotations}\n                setNewValues={setNewAnnotations}\n                paramName={\"Annotations\"}\n                error={annotationsError}\n                setError={setAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newNodeSelector}\n                setNewValues={setNewNodeSelector}\n                paramName={\"Node Selector\"}\n                error={nodeSelectorError}\n                setError={setNodeSelectorError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h4>Database Configuration </h4>\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbImage`}\n                label={\"Postgres Image\"}\n                placeholder={\"library/postgres:13\"}\n                name={`dbImage`}\n                value={newDbImage}\n                onChange={(e) => {\n                  setNewDbImage(e.target.value);\n                  cleanValidation(`dbImage`);\n                }}\n                key={`dbImage`}\n                error={validationErrors[`dbImage`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbInitImage`}\n                label={\"Postgres Init Image\"}\n                placeholder={\"library/busybox:1.33.1\"}\n                name={`dbInitImage`}\n                value={newDbInitImage}\n                onChange={(e) => {\n                  setNewDbInitImage(e.target.value);\n                  cleanValidation(`dbInitImage`);\n                }}\n                key={`dbInitImage`}\n                error={validationErrors[`dbInitImage`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbServiceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Db Service Account Name\"}\n                name={`dbServiceAccountName`}\n                value={newDbServiceAccountName}\n                onChange={(e) => {\n                  setNewDbServiceAccountName(e.target.value);\n                  cleanValidation(`dbServiceAccountName`);\n                }}\n                key={`dbServiceAccountName`}\n                error={validationErrors[`dbServiceAccountName`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbCpuRequest`}\n                label={\"DB CPU Request\"}\n                placeholder={\"DB CPU Request\"}\n                name={`dbCpuRequest`}\n                value={newDBCPURequest as any as string}\n                onChange={(e) => {\n                  setNewDBCPURequest(e.target.value as any as string);\n                  cleanValidation(`dbCpuRequest`);\n                }}\n                key={`dbCpuRequest`}\n                error={validationErrors[`dbCpuRequest`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbMemRequest`}\n                label={\"DB Memory request\"}\n                placeholder={\"DB Memory request\"}\n                name={`dbMemRequest`}\n                value={newDBMemRequest}\n                onChange={(e) => {\n                  setNewDBMemRequest(e.target.value as any as string);\n                  cleanValidation(`dbMemRequest`);\n                }}\n                key={`dbMemRequest`}\n                error={validationErrors[`dbMemRequest`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newDbLabels}\n                setNewValues={setNewDbLabels}\n                paramName={\"Db Labels\"}\n                error={dbLabelsError}\n                setError={setDbLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newDbAnnotations}\n                setNewValues={setNewDbAnnotations}\n                paramName={\"Db Annotations\"}\n                error={dbAnnotationsError}\n                setError={setDbAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newDbNodeSelector}\n                setNewValues={setNewDbNodeSelector}\n                paramName={\"DbNode Selector\"}\n                error={dbNodeSelectorError}\n                setError={setDbNodeSelectorError}\n              />\n            </Grid>\n          </Grid>\n          <Grid xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!checkValid()}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(EditTenantLogsModal);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { DialogContentText } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport api from \"../../../../common/api\";\nimport { ITenantLogsStruct } from \"../ListTenants/types\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { EditIcon } from \"../../../../icons\";\nimport EditTenantLogsModal from \"./EditTenantLogsModal\";\nimport KeyPairView from \"./KeyPairView\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { niceBytes } from \"../../../../common/utils\";\nimport Loader from \"../../Common/Loader/Loader\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useParams } from \"react-router-dom\";\n\ninterface ITenantLogs {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    ...actionsTray,\n    ...searchField,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst TenantLogging = ({ classes }: ITenantLogs) => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n\n  const [loadingTenantLogs, setLoadingTenantLogs] = useState<boolean>(true);\n  const [logInfo, setLogInfo] = useState<ITenantLogsStruct>();\n  const [edit, setEdit] = useState<boolean>(false);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [preDisabled, setPreDisabled] = useState<boolean>(false);\n  const [disableDialogOpen, setDisableDialogOpen] = useState<boolean>(false);\n  const [enableDialogOpen, setEnableDialogOpen] = useState<boolean>(false);\n\n  const tenantName = params.tenantName;\n  const tenantNamespace = params.tenantNamespace;\n\n  useEffect(() => {\n    if (loadingTenantLogs) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`\n        )\n        .then((result: ITenantLogsStruct) => {\n          setLogInfo(result);\n          setPreDisabled(result.disabled);\n          setDisabled(result.disabled);\n          setLoadingTenantLogs(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: \"Error getting tenant logs\",\n              detailedError: err.detailedError,\n            })\n          );\n        });\n    }\n  }, [\n    tenantName,\n    tenantNamespace,\n    loadingTenantLogs,\n    setDisabled,\n    disabled,\n    dispatch,\n  ]);\n\n  const onCloseEditAndRefresh = () => {\n    setDisableDialogOpen(false);\n    setEdit(false);\n    setLoadingTenantLogs(true);\n  };\n\n  const onCloseEnableAndRefresh = () => {\n    setEnableDialogOpen(false);\n    setDisabled(false);\n    setLoadingTenantLogs(true);\n  };\n\n  return (\n    <Fragment>\n      <ConfirmDialog\n        title=\"Disable Logging?\"\n        confirmText=\"Disable\"\n        isOpen={disableDialogOpen}\n        onConfirm={() => {\n          api\n            .invoke(\n              \"POST\",\n              `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/disable-logging`\n            )\n            .then(() => {\n              setPreDisabled(true);\n              setDisabled(true);\n            })\n            .catch((err: ErrorResponseHandler) => {\n              dispatch(\n                setErrorSnackMessage({\n                  errorMessage: \"Error disabling logging\",\n                  detailedError: err.detailedError,\n                })\n              );\n            });\n          onCloseEditAndRefresh();\n        }}\n        onClose={() => setDisableDialogOpen(false)}\n        confirmationContent={\n          <DialogContentText>\n            Disabling logging will erase any custom values you have used to\n            configure logging\n          </DialogContentText>\n        }\n      />\n      <ConfirmDialog\n        title=\"Enable Logging?\"\n        confirmText=\"Enable\"\n        isOpen={enableDialogOpen}\n        onConfirm={() => {\n          api\n            .invoke(\n              \"POST\",\n              `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/enable-logging`\n            )\n            .then(() => {\n              setPreDisabled(false);\n            })\n            .catch((err: ErrorResponseHandler) => {\n              dispatch(\n                setErrorSnackMessage({\n                  errorMessage: \"Error enabling logging\",\n                  detailedError: err.detailedError,\n                })\n              );\n            });\n          onCloseEnableAndRefresh();\n        }}\n        onClose={() => setEnableDialogOpen(false)}\n        confirmationContent={\n          <DialogContentText>\n            Logging will be enabled with default values\n          </DialogContentText>\n        }\n      />\n      {edit && tenant !== null && logInfo != null && !disabled && (\n        <EditTenantLogsModal\n          open={edit}\n          onClose={onCloseEditAndRefresh}\n          tenant={tenant}\n          image={logInfo.image}\n          labels={logInfo.labels}\n          annotations={logInfo.annotations}\n          nodeSelector={logInfo.nodeSelector}\n          diskCapacityGB={logInfo.diskCapacityGB}\n          serviceAccountName={logInfo.serviceAccountName}\n          dbImage={logInfo.dbImage}\n          dbInitImage={logInfo.dbInitImage}\n          dbLabels={logInfo.dbLabels}\n          dbAnnotations={logInfo.dbAnnotations}\n          dbNodeSelector={logInfo.dbNodeSelector}\n          dbServiceAccountName={logInfo.dbServiceAccountName}\n          cpuRequest={logInfo.logCPURequest}\n          memRequest={logInfo.logMemRequest}\n          dbCPURequest={logInfo.logDBCPURequest}\n          dbMemRequest={logInfo.logDBMemRequest}\n        />\n      )}\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Audit Log</h1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            value=\"enableLogging\"\n            id=\"enableLogging\"\n            name=\"enableLogging\"\n            checked={!preDisabled}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n              if (checked) {\n                setEnableDialogOpen(true);\n              } else {\n                setDisableDialogOpen(true);\n              }\n            }}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n          />\n        </Grid>\n      </Grid>\n      {!disabled && !loadingTenantLogs && (\n        <Paper className={classes.paperContainer}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Grid container alignItems={\"center\"}>\n                <Grid xs={8}>\n                  <h3>Configuration</h3>\n                </Grid>\n                <Grid xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n                  <RBIconButton\n                    tooltip={\"Edit Logging configuration\"}\n                    text={\"Edit\"}\n                    onClick={() => {\n                      setEdit(true);\n                    }}\n                    icon={<EditIcon />}\n                    color=\"primary\"\n                    variant={\"contained\"}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <Loader />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      {logInfo?.logCPURequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>CPU Request:</td>\n                          <td>{logInfo?.logCPURequest}</td>\n                        </tr>\n                      )}\n                      {logInfo?.logMemRequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Memory Request:</td>\n                          <td>{niceBytes(logInfo?.logMemRequest, true)}</td>\n                        </tr>\n                      )}\n                      {logInfo?.image != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Image:</td>\n                          <td>{logInfo?.image}</td>\n                        </tr>\n                      )}\n                      {logInfo?.diskCapacityGB != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            Disk Capacity (GB):\n                          </td>\n                          <td>{logInfo?.diskCapacityGB}</td>\n                        </tr>\n                      )}\n                      {logInfo?.serviceAccountName != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Service Account:</td>\n                          <td>{logInfo?.serviceAccountName}</td>\n                        </tr>\n                      )}\n                      {logInfo?.labels != null && logInfo.labels.length > 0 && (\n                        <Fragment>\n                          <tr>\n                            <td>\n                              <h4>Labels</h4>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              <KeyPairView\n                                records={\n                                  logInfo != null && logInfo.labels.length > 0\n                                    ? logInfo.labels\n                                    : []\n                                }\n                                recordName=\"Labels\"\n                              />\n                            </td>\n                          </tr>\n                        </Fragment>\n                      )}\n                      {logInfo?.annotations != null &&\n                        logInfo.annotations.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Annotations</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.annotations.length > 0\n                                      ? logInfo.annotations\n                                      : []\n                                  }\n                                  recordName=\"Annotations\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                      {logInfo?.nodeSelector != null &&\n                        logInfo.nodeSelector.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Node Selector</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.nodeSelector.length > 0\n                                      ? logInfo.nodeSelector\n                                      : []\n                                  }\n                                  recordName=\"Node Selector\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n\n              <h2>Database Details</h2>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <Loader />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      {logInfo?.logDBCPURequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>DB CPU Request:</td>\n                          <td>{logInfo?.logDBCPURequest}</td>\n                        </tr>\n                      )}\n                      {logInfo?.logDBMemRequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            DB Memory Request:\n                          </td>\n                          <td>{niceBytes(logInfo?.logDBMemRequest, true)}</td>\n                        </tr>\n                      )}\n                      {logInfo?.dbImage != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Postgres Image:</td>\n                          <td>{logInfo?.dbImage}</td>\n                        </tr>\n                      )}\n                      {logInfo?.dbServiceAccountName != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Service Account:</td>\n                          <td>{logInfo?.dbServiceAccountName}</td>\n                        </tr>\n                      )}\n                      {logInfo?.dbLabels != null &&\n                        logInfo.dbLabels.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Labels</h4>\n                              </td>\n                            </tr>\n\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.dbLabels?.length > 0\n                                      ? logInfo.dbLabels\n                                      : []\n                                  }\n                                  recordName=\"labels\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                      {logInfo?.annotations != null &&\n                        logInfo.dbAnnotations.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Annotations</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.dbAnnotations?.length > 0\n                                      ? logInfo.dbAnnotations\n                                      : []\n                                  }\n                                  recordName=\"annotations\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                      {logInfo?.nodeSelector != null &&\n                        logInfo.dbNodeSelector.length > 0 && (\n                          <Fragment>\n                            <tr>\n                              <td>\n                                <h4>Node Selector </h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <KeyPairView\n                                  records={\n                                    logInfo != null &&\n                                    logInfo.dbNodeSelector?.length > 0\n                                      ? logInfo.dbNodeSelector\n                                      : []\n                                  }\n                                  recordName=\"node selectors\"\n                                />\n                              </td>\n                            </tr>\n                          </Fragment>\n                        )}\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n            </Grid>\n          </Grid>\n        </Paper>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantLogging));\n"],"names":["withStyles","theme","createStyles","buttonContainer","textAlign","bottomContainer","display","flexGrow","alignItems","width","modalBasic","modalStyleUtils","formFieldStyles","tenant","classes","open","onClose","image","labels","annotations","nodeSelector","diskCapacityGB","serviceAccountName","dbLabels","dbAnnotations","dbNodeSelector","dbImage","dbInitImage","dbServiceAccountName","cpuRequest","memRequest","dbCPURequest","dbMemRequest","dispatch","useAppDispatch","useState","validationErrors","setValidationErrors","length","key","value","newLabels","setNewLabels","newAnnotations","setNewAnnotations","newNodeSelector","setNewNodeSelector","newImage","setNewImage","newDiskCapacityGB","setNewDiskCapacityGB","newServiceAccountName","setNewServiceAccountName","newDbLabels","setNewDbLabels","newDbAnnotations","setNewDbAnnotations","newDbNodeSelector","setNewDbNodeSelector","newDbImage","setNewDbImage","newDbInitImage","setNewDbInitImage","newDbServiceAccountName","setNewDbServiceAccountName","labelsError","setLabelsError","annotationsError","setAnnotationsError","nodeSelectorError","setNodeSelectorError","dbLabelsError","setDbLabelsError","dbAnnotationsError","setDbAnnotationsError","dbNodeSelectorError","setDbNodeSelectorError","newCPURequest","setNewCPURequest","Math","floor","parseInt","toString","newMemRequest","setNewMemRequest","newDBCPURequest","setNewDBCPURequest","newDBMemRequest","setNewDBMemRequest","trim","x","retval","i","push","cleanValidation","fieldName","clearValidationError","useEffect","tenantLogValidation","fieldKey","required","pattern","customPatternMessage","commonVal","commonFormValidation","checkValid","Object","keys","ModalWrapper","modalOpen","title","noValidate","autoComplete","onSubmit","e","preventDefault","api","namespace","name","logCPURequest","logMemRequest","logDBCPURequest","logDBMemRequest","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","Grid","container","xs","className","modalFormScrollable","item","formFieldRow","InputBoxWrapper","id","label","placeholder","onChange","target","error","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","inputLabel","KeyPairEdit","newValues","setNewValues","paramName","setError","Button","type","variant","color","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenantInfo","tenantDetailsStyles","paperContainer","padding","actionsTray","searchField","containerForHeader","spacing","params","useParams","useSelector","loadingTenantLogs","setLoadingTenantLogs","logInfo","setLogInfo","edit","setEdit","setDisabled","preDisabled","setPreDisabled","disableDialogOpen","setDisableDialogOpen","enableDialogOpen","setEnableDialogOpen","tenantName","tenantNamespace","result","setErrorSnackMessage","onCloseEditAndRefresh","Fragment","ConfirmDialog","confirmText","isOpen","onConfirm","confirmationContent","DialogContentText","sectionTitle","FormSwitchWrapper","checked","indicatorLabels","Paper","justifyContent","RBIconButton","tooltip","text","onClick","icon","hrClass","centerAlign","colSpan","Loader","titleCol","niceBytes","KeyPairView","records","recordName"],"sourceRoot":""}