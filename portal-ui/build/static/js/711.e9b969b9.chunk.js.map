{"version":3,"file":"static/js/711.e9b969b9.chunk.js","mappings":"kOAqHA,UAhFqB,SAAC,GAOK,IANzBA,EAMwB,EANxBA,2BACAC,EAKwB,EALxBA,WACAC,EAIwB,EAJxBA,eACAC,EAGwB,EAHxBA,gBAEAC,EACwB,EADxBA,WAEMC,GAAWC,EAAAA,EAAAA,MAKjB,GAA4CC,EAAAA,EAAAA,WAAkB,GAA9D,eAAOC,EAAP,KAAuBC,EAAvB,KAEA,GAAyCC,EAAAA,EAAAA,IANpB,kBAAMV,GAA2B,MACnC,SAACW,GAAD,OACjBN,GAASO,EAAAA,EAAAA,IAAqBD,OAIhC,eAAOE,EAAP,KAAsBC,EAAtB,KAEA,IAAKX,EACH,OAAO,KA6BT,OACE,SAAC,IAAD,CACEY,MAAK,iBACLC,YAAa,SACbC,OAAQhB,EACRiB,WAAW,SAAC,MAAD,IACXC,UAAWN,EACXO,UAlCoB,WAEtB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAInB,EAAgBoB,OAAQD,IACtCnB,EAAgBmB,GAAGE,SAAS,KAC9BH,EAAOI,KAAK,CACVC,KAAMvB,EAAgBmB,GACtBK,UAAW,GACXC,WAAW,IAGbP,EAAOI,KAAK,CACVC,KAAMvB,EAAgBmB,GACtBK,UAAW,GACXC,WAAW,IAKbP,GACFP,EACE,OADa,0BAEMZ,EAFN,wCAEoDM,GACjEa,IAaFQ,QA3CY,kBAAM7B,GAA2B,IA4C7C8B,qBACE,UAAC,IAAD,2DACgD3B,EAAgBoB,OAAQ,IADxE,WAEW,IACRnB,IACC,SAAC,IAAD,CACE2B,MAAO,sBACPC,gBAAiB,CAAC,MAAO,MACzBC,QAASzB,EACT0B,MAAO,kBACPC,GAAG,kBACHC,KAAK,kBACLC,SAAU,SAACC,GACT7B,GAAmBD,IAErB+B,YAAY","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/DeleteMultipleObjects.tsx"],"sourcesContent":["// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { DialogContentText } from \"@mui/material\";\n\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport useApi from \"../../../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../../../icons\";\nimport FormSwitchWrapper from \"../../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\n\nimport { setErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../../../store\";\n\ninterface IDeleteObjectProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedObjects: string[];\n  selectedBucket: string;\n\n  versioning: boolean;\n}\n\nconst DeleteObject = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  selectedObjects,\n\n  versioning,\n}: IDeleteObjectProps) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [deleteVersions, setDeleteVersions] = useState<boolean>(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedObjects) {\n    return null;\n  }\n  const onConfirmDelete = () => {\n    let toSend = [];\n    for (let i = 0; i < selectedObjects.length; i++) {\n      if (selectedObjects[i].endsWith(\"/\")) {\n        toSend.push({\n          path: selectedObjects[i],\n          versionID: \"\",\n          recursive: true,\n        });\n      } else {\n        toSend.push({\n          path: selectedObjects[i],\n          versionID: \"\",\n          recursive: false,\n        });\n      }\n    }\n\n    if (toSend) {\n      invokeDeleteApi(\n        \"POST\",\n        `/api/v1/buckets/${selectedBucket}/delete-objects?all_versions=${deleteVersions}`,\n        toSend\n      );\n    }\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Objects`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          Are you sure you want to delete the selected {selectedObjects.length}{\" \"}\n          objects?{\" \"}\n          {versioning && (\n            <FormSwitchWrapper\n              label={\"Delete All Versions\"}\n              indicatorLabels={[\"Yes\", \"No\"]}\n              checked={deleteVersions}\n              value={\"delete_versions\"}\n              id=\"delete-versions\"\n              name=\"delete-versions\"\n              onChange={(e) => {\n                setDeleteVersions(!deleteVersions);\n              }}\n              description=\"\"\n            />\n          )}\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default DeleteObject;\n"],"names":["closeDeleteModalAndRefresh","deleteOpen","selectedBucket","selectedObjects","versioning","dispatch","useAppDispatch","useState","deleteVersions","setDeleteVersions","useApi","err","setErrorSnackMessage","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","titleIcon","isLoading","onConfirm","toSend","i","length","endsWith","push","path","versionID","recursive","onClose","confirmationContent","label","indicatorLabels","checked","value","id","name","onChange","e","description"],"sourceRoot":""}