{"version":3,"file":"static/js/7164.3762a0c0.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/NotificationEndpoints/CustomForms/ConfPostgres.tsx"],"sourcesContent":["// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface CommentBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: 14,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      flexWrap: \"wrap\",\n      display: \"flex\",\n    },\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    cssOutlinedInput: {\n      borderColor: \"#EAEAEA\",\n      padding: 16,\n    },\n    rootContainer: {\n      \"& .MuiOutlinedInput-inputMultiline\": {\n        ...fieldBasic.inputLabel,\n        fontSize: 13,\n        minHeight: 150,\n      },\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"#07193E\",\n        borderWidth: 1,\n      },\n      \"& textarea\": {\n        color: \"#07193E\",\n        fontSize: 13,\n        fontWeight: 600,\n        \"&:placeholder\": {\n          color: \"#858585\",\n          opacity: 1,\n          fontWeight: 400,\n        },\n      },\n    },\n  });\n\nconst CommentBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  classes,\n}: CommentBoxProps) => {\n  let inputProps: any = { \"data-index\": index };\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fieldContainer} ${\n          error !== \"\" ? classes.errorInField : \"\"\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <TextField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            multiline\n            rows={5}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              classes: {\n                notchedOutline: classes.cssOutlinedInput,\n                root: classes.rootContainer,\n              },\n            }}\n            variant=\"outlined\"\n          />\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CommentBoxWrapper);\n","import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { IElementValue } from \"../../Configurations/types\";\nimport {\n  formFieldStyles,\n  modalBasic,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport CommentBoxWrapper from \"../../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport PredefinedList from \"../../Common/FormComponents/PredefinedList/PredefinedList\";\n\ninterface IConfPostgresProps {\n  onChange: (newValue: IElementValue[]) => void;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n    ...formFieldStyles,\n  });\n\nconst ConfPostgres = ({ onChange, classes }: IConfPostgresProps) => {\n  //Local States\n  const [useConnectionString, setUseConnectionString] =\n    useState<boolean>(false);\n  const [connectionString, setConnectionString] = useState<string>(\"\");\n  const [host, setHostname] = useState<string>(\"\");\n  const [dbName, setDbName] = useState<string>(\"\");\n  const [port, setPort] = useState<string>(\"\");\n  const [user, setUser] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [sslMode, setSslMode] = useState<string>(\" \");\n\n  const [table, setTable] = useState<string>(\"\");\n  const [format, setFormat] = useState<string>(\"namespace\");\n  const [queueDir, setQueueDir] = useState<string>(\"\");\n  const [queueLimit, setQueueLimit] = useState<string>(\"\");\n  const [comment, setComment] = useState<string>(\"\");\n\n  // connection_string*  (string)             Postgres server connection-string e.g. \"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\"\n\n  //  \"host=localhost\n  // port=5432\n  //dbname=minio_events\n  //user=postgres\n  //password=password\n  //sslmode=disable\"\n\n  // table*              (string)             DB table name to store/update events, table is auto-created\n  // format*             (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\n  // queue_dir           (path)               staging dir for undelivered messages e.g. '/home/events'\n  // queue_limit         (number)             maximum limit for undelivered messages, defaults to '10000'\n  // comment             (sentence)           optionally add a comment to this setting\n\n  const KvSeparator = \"=\";\n  const parseConnectionString = (\n    input: string,\n    keys: string[]\n  ): Map<string, string> => {\n    let valueIndexes: number[] = [];\n\n    for (const key of keys) {\n      const i = input.indexOf(key + KvSeparator);\n      if (i === -1) {\n        continue;\n      }\n      valueIndexes.push(i);\n    }\n    valueIndexes.sort((n1, n2) => n1 - n2);\n\n    let kvFields = new Map<string, string>();\n    let fields: string[] = new Array<string>(valueIndexes.length);\n    for (let i = 0; i < valueIndexes.length; i++) {\n      const j = i + 1;\n      if (j < valueIndexes.length) {\n        fields[i] = input.slice(valueIndexes[i], valueIndexes[j]);\n      } else {\n        fields[i] = input.slice(valueIndexes[i]);\n      }\n    }\n\n    for (let field of fields) {\n      if (field === undefined) {\n        continue;\n      }\n      const key = field.slice(0, field.indexOf(\"=\"));\n      const value = field.slice(field.indexOf(\"=\") + 1).trim();\n      kvFields.set(key, value);\n    }\n    return kvFields;\n  };\n\n  const configToString = useCallback((): string => {\n    let strValue = \"\";\n    if (host !== \"\") {\n      strValue = `${strValue} host=${host}`;\n    }\n    if (dbName !== \"\") {\n      strValue = `${strValue} dbname=${dbName}`;\n    }\n    if (user !== \"\") {\n      strValue = `${strValue} user=${user}`;\n    }\n    if (password !== \"\") {\n      strValue = `${strValue} password=${password}`;\n    }\n    if (port !== \"\") {\n      strValue = `${strValue} port=${port}`;\n    }\n    if (sslMode !== \" \") {\n      strValue = `${strValue} sslmode=${sslMode}`;\n    }\n\n    strValue = `${strValue} `;\n\n    return strValue.trim();\n  }, [host, dbName, user, password, port, sslMode]);\n\n  useEffect(() => {\n    if (connectionString !== \"\") {\n      const formValues = [\n        { key: \"connection_string\", value: connectionString },\n        { key: \"table\", value: table },\n        { key: \"format\", value: format },\n        { key: \"queue_dir\", value: queueDir },\n        { key: \"queue_limit\", value: queueLimit },\n        { key: \"comment\", value: comment },\n      ];\n\n      onChange(formValues);\n    }\n  }, [\n    connectionString,\n    table,\n    format,\n    queueDir,\n    queueLimit,\n    comment,\n    onChange,\n  ]);\n\n  useEffect(() => {\n    const cs = configToString();\n    setConnectionString(cs);\n  }, [\n    user,\n    dbName,\n    password,\n    port,\n    sslMode,\n    host,\n    setConnectionString,\n    configToString,\n  ]);\n\n  useEffect(() => {\n    if (useConnectionString) {\n      // build connection_string\n      const cs = configToString();\n      setConnectionString(cs);\n\n      return;\n    }\n    // parse connection_string\n    const kv = parseConnectionString(connectionString, [\n      \"host\",\n      \"port\",\n      \"dbname\",\n      \"user\",\n      \"password\",\n      \"sslmode\",\n    ]);\n    setHostname(kv.get(\"host\") ? kv.get(\"host\") + \"\" : \"\");\n    setPort(kv.get(\"port\") ? kv.get(\"port\") + \"\" : \"\");\n    setDbName(kv.get(\"dbname\") ? kv.get(\"dbname\") + \"\" : \"\");\n    setUser(kv.get(\"user\") ? kv.get(\"user\") + \"\" : \"\");\n    setPassword(kv.get(\"password\") ? kv.get(\"password\") + \"\" : \"\");\n    setSslMode(kv.get(\"sslmode\") ? kv.get(\"sslmode\") + \"\" : \" \");\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [useConnectionString]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          label={\"Manually Configure String\"}\n          checked={useConnectionString}\n          id=\"manualString\"\n          name=\"manualString\"\n          onChange={(e) => {\n            setUseConnectionString(e.target.checked);\n          }}\n          value={\"manualString\"}\n        />\n      </Grid>\n      {useConnectionString ? (\n        <React.Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"connection-string\"\n              name=\"connection_string\"\n              label=\"Connection String\"\n              value={connectionString}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setConnectionString(e.target.value);\n              }}\n            />\n          </Grid>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <Grid item xs={12}>\n            <Grid item xs={12} className={classes.configureString}>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"host\"\n                  name=\"host\"\n                  label=\"\"\n                  placeholder=\"Enter Host\"\n                  value={host}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setHostname(e.target.value);\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"db-name\"\n                  name=\"db-name\"\n                  label=\"\"\n                  placeholder=\"Enter DB Name\"\n                  value={dbName}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setDbName(e.target.value);\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"port\"\n                  name=\"port\"\n                  label=\"\"\n                  placeholder=\"Enter Port\"\n                  value={port}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setPort(e.target.value);\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <SelectWrapper\n                  value={sslMode}\n                  label=\"\"\n                  id=\"sslmode\"\n                  name=\"sslmode\"\n                  onChange={(e): void => {\n                    if (e.target.value !== undefined) {\n                      setSslMode(e.target.value + \"\");\n                    }\n                  }}\n                  options={[\n                    { label: \"Enter SSL Mode\", value: \" \" },\n                    { label: \"Require\", value: \"require\" },\n                    { label: \"Disable\", value: \"disable\" },\n                    { label: \"Verify CA\", value: \"verify-ca\" },\n                    { label: \"Verify Full\", value: \"verify-full\" },\n                  ]}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"user\"\n                  name=\"user\"\n                  label=\"\"\n                  placeholder=\"Enter User\"\n                  value={user}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setUser(e.target.value);\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"password\"\n                  name=\"password\"\n                  label=\"\"\n                  type=\"password\"\n                  placeholder=\"Enter Password\"\n                  value={password}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setPassword(e.target.value);\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <PredefinedList\n            label={\"Connection String\"}\n            content={connectionString}\n          />\n          <Grid item xs={12}>\n            <br />\n          </Grid>\n        </React.Fragment>\n      )}\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"table\"\n          name=\"table\"\n          label=\"Table\"\n          placeholder={\"Enter Table Name\"}\n          value={table}\n          tooltip=\"DB table name to store/update events, table is auto-created\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setTable(e.target.value);\n          }}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <RadioGroupSelector\n          currentSelection={format}\n          id=\"format\"\n          name=\"format\"\n          label=\"Format\"\n          onChange={(e) => {\n            setFormat(e.target.value);\n          }}\n          tooltip=\"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\"\n          selectorOptions={[\n            { label: \"Namespace\", value: \"namespace\" },\n            { label: \"Access\", value: \"access\" },\n          ]}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"queue-dir\"\n          name=\"queue_dir\"\n          label=\"Queue Dir\"\n          placeholder=\"Enter Queue Directory\"\n          value={queueDir}\n          tooltip=\"staging dir for undelivered messages e.g. '/home/events'\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setQueueDir(e.target.value);\n          }}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"queue-limit\"\n          name=\"queue_limit\"\n          label=\"Queue Limit\"\n          placeholder=\"Enter Queue Limit\"\n          type=\"number\"\n          value={queueLimit}\n          tooltip=\"maximum limit for undelivered messages, defaults to '10000'\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setQueueLimit(e.target.value);\n          }}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <CommentBoxWrapper\n          id=\"comment\"\n          name=\"comment\"\n          label=\"Comment\"\n          placeholder=\"Enter custom notes if any\"\n          value={comment}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setComment(e.target.value);\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(ConfPostgres);\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","inputLabel","fontSize","margin","alignItems","paddingTop","flexWrap","display","textBoxContainer","flexGrow","position","cssOutlinedInput","borderColor","padding","rootContainer","minHeight","borderWidth","color","fontWeight","opacity","label","onChange","value","id","name","disabled","tooltip","index","error","required","placeholder","classes","inputProps","item","xs","className","fieldContainer","errorInField","htmlFor","tooltipContainer","title","placement","fullWidth","multiline","rows","helperText","InputLabelProps","shrink","InputProps","notchedOutline","root","variant","predefinedList","content","multiLine","actionButton","Fragment","prefinedContainer","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","modalBasic","formFieldStyles","useState","useConnectionString","setUseConnectionString","connectionString","setConnectionString","host","setHostname","dbName","setDbName","port","setPort","user","setUser","password","setPassword","sslMode","setSslMode","table","setTable","format","setFormat","queueDir","setQueueDir","queueLimit","setQueueLimit","comment","setComment","configToString","useCallback","strValue","trim","useEffect","key","cs","kv","input","keys","valueIndexes","i","indexOf","push","sort","n1","n2","kvFields","Map","fields","Array","length","j","slice","field","undefined","set","parseConnectionString","get","container","checked","e","target","formFieldRow","configureString","options","type","currentSelection","selectorOptions"],"sourceRoot":""}