{"version":3,"file":"static/js/9449.2b80f120.chunk.js","mappings":"oYA2aA,GAAeA,EAAAA,EAAAA,IA9XA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,wBACXC,gBAAiB,CACfC,UAAW,UAEVC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,OAuXP,EApXkC,SAAC,GAkBD,EAjBhCC,OAiBiC,IAhBjCC,EAgBgC,EAhBhCA,QACAC,EAegC,EAfhCA,KACAC,EAcgC,EAdhCA,QACAC,EAagC,EAbhCA,MACAC,EAYgC,EAZhCA,aACAC,EAWgC,EAXhCA,UACAC,EAUgC,EAVhCA,OACAC,EASgC,EAThCA,YACAC,EAQgC,EARhCA,aACAC,EAOgC,EAPhCA,eACAC,EAMgC,EANhCA,mBACAC,EAKgC,EALhCA,iBACAC,EAIgC,EAJhCA,WACAC,EAGgC,EAHhCA,gBACAC,EAEgC,EAFhCA,WACAC,EACgC,EADhCA,WAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAAgDC,EAAAA,EAAAA,UAAc,IAA9D,eAAOC,EAAP,KAAyBC,EAAzB,KACA,GAAkCF,EAAAA,EAAAA,UAChCZ,EAAOe,OAAS,GAAhB,OAAwBf,GAAU,CAAC,CAAEgB,IAAK,GAAIC,MAAO,MADvD,eAAOC,EAAP,KAAkBC,EAAlB,KAGA,GAA4CP,EAAAA,EAAAA,UAC1CX,EAAYc,OAAS,GAArB,OAA6Bd,GAAe,CAAC,CAAEe,IAAK,GAAIC,MAAO,MADjE,eAAOG,EAAP,KAAuBC,EAAvB,KAGA,GAA8CT,EAAAA,EAAAA,UAC5CV,EAAaa,OAAS,GAAtB,OAA8Bb,GAAgB,CAAC,CAAEc,IAAK,GAAIC,MAAO,MADnE,eAAOK,EAAP,KAAwBC,EAAxB,KAGA,GAAgCX,EAAAA,EAAAA,UAAiBf,GAAjD,eAAO2B,EAAP,KAAiBC,EAAjB,KACA,GAA8Cb,EAAAA,EAAAA,UAAiBd,GAA/D,eAAO4B,GAAP,KAAwBC,GAAxB,KACA,IAAwCf,EAAAA,EAAAA,UAAiBb,GAAzD,iBAAO6B,GAAP,MAAqBC,GAArB,MACA,IAAkDjB,EAAAA,EAAAA,UAChDT,EAAe2B,YADjB,iBAAOC,GAAP,MAA0BC,GAA1B,MAGA,IAA0CpB,EAAAA,EAAAA,UAAiBJ,GAA3D,iBAAOyB,GAAP,MAAsBC,GAAtB,MACA,IAA0CtB,EAAAA,EAAAA,UACxCH,EACI0B,KAAKC,MAAMC,SAAS5B,EAAY,IAAM,KAAYqB,WAClD,IAHN,iBAAOQ,GAAP,MAAsBC,GAAtB,MAKA,IACE3B,EAAAA,EAAAA,UAAiBR,GADnB,iBAAOoC,GAAP,MAA8BC,GAA9B,MAEA,IACE7B,EAAAA,EAAAA,UAAiBP,GADnB,iBAAOqC,GAAP,MAA4BC,GAA5B,MAGA,IAAsC/B,EAAAA,EAAAA,UAAc,IAApD,iBAAOgC,GAAP,MAAoBC,GAApB,MACA,IAAgDjC,EAAAA,EAAAA,UAAc,IAA9D,iBAAOkC,GAAP,MAAyBC,GAAzB,MACA,IAAkDnC,EAAAA,EAAAA,UAAc,IAAhE,iBAAOoC,GAAP,MAA0BC,GAA1B,MAEMC,GAAO,SAACC,GAEZ,IADA,IAAIC,EAAsB,GACjBC,EAAI,EAAGA,EAAIF,EAAEpC,OAAQsC,IACX,KAAbF,EAAEE,GAAGrC,KACPoC,EAAOE,KAAKH,EAAEE,IAGlB,OAAOD,IAGTG,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAA4C,GAEhDA,EAA2BF,KAAK,CAC9BG,SAAS,QACTC,UAAU,EACVzC,MAAOO,EACPmC,QACE,wIACFC,qBAAsB,kBAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,eACTC,UAAU,EACVzC,MAAOS,GACPiC,QACE,wIACFC,qBAAsB,kBAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,YACTC,UAAU,EACVzC,MAAOW,GACP+B,QACE,wIACFC,qBAAsB,kBAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,iBACTC,UAAU,EACVzC,MAAOc,GACP4B,QAAS,WACTC,qBAAsB,wCAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,gBACTC,UAAU,EACVzC,MAAOgB,GACP0B,QAAS,WACTC,qBAAsB,wCAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,gBACTC,UAAU,EACVzC,MAAOqB,GACPqB,QAAS,WACTC,qBAAsB,wCAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,qBACTC,UAAU,EACVzC,MAAOuB,GACPmB,QAAS,yBACTC,qBAAsB,iCAExBJ,EAA2BF,KAAK,CAC9BG,SAAS,mBACTC,UAAU,EACVzC,MAAOyB,GACPiB,QAAS,yBACTC,qBAAsB,+BAGxB,IAAMC,GAAYC,EAAAA,EAAAA,GAAqBN,GACvC1C,EAAoB+C,KACnB,CACDrC,EACAE,GACAE,GACAG,GACAS,GACAE,GACAT,GACAK,GACAxB,IAgDF,OACE,SAACiD,EAAA,EAAD,CACEnE,QAAS,kBAAMA,GAAQ,IACvBoE,UAAWrE,EACXsE,MAAM,gCAHR,UAKE,iBAAMC,YAAU,EAACC,aAAa,MAAMC,SAjCX,SAACC,GAC5BA,EAAMC,iBAENC,EAAAA,EAAAA,OAEI,MAFJ,6BAG0BhE,EAH1B,oBAGqDD,EAHrD,eAII,CACEN,OAAQkD,GAAKhC,GACbjB,YAAaiD,GAAK9B,GAClBlB,aAAcgD,GAAK5B,GACnBzB,MAAO2B,EACP1B,aAAc4B,GACd3B,UAAW6B,GACXzB,eAAgB4B,GAChB3B,mBAAoBoC,GACpBnC,iBAAkBqC,GAClB8B,qBAAsBvC,GACtBwC,qBAAsBnC,GAAgB,OAGzCoC,MAAK,WACJ9E,GAAQ,MAET+E,OAAM,SAACC,QASR,UACE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,UAACD,EAAA,GAAD,CAAME,GAAI,GAAIC,UAAWtF,EAAQuF,oBAAjC,WACE,SAACJ,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,QACFC,MAAO,QACPC,YAAa,uCACbC,KAAI,QACJvE,MAAOO,EACPiE,SAAU,SAACpB,GACT5C,EAAY4C,EAAMqB,OAAOzE,QAG3B0E,MAAO9E,EAAgB,OAAa,IAVtC,YAaF,SAACgE,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,eACFC,MAAO,gBACPC,YAAa,wBACbC,KAAI,eACJvE,MAAOS,GACP+D,SAAU,SAACpB,GACT1C,GAAmB0C,EAAMqB,OAAOzE,QAGlC0E,MAAO9E,EAAgB,cAAoB,IAV7C,mBAaF,SAACgE,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,YACFC,MAAO,aACPC,YAAa,yBACbC,KAAI,YACJvE,MAAOW,GACP6D,SAAU,SAACpB,GACTxC,GAAgBwC,EAAMqB,OAAOzE,QAG/B0E,MAAO9E,EAAgB,WAAiB,IAV1C,gBAaF,SAACgE,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,iBACFC,MAAO,gBACPC,YAAa,gBACbC,KAAI,iBACJvE,MAAOc,GACP0D,SAAU,SAACpB,GACTrC,GAAqBqC,EAAMqB,OAAOzE,QAGpC0E,MAAO9E,EAAgB,gBAAsB,GAC7C+E,eACE,SAACC,EAAA,EAAD,CACER,GAAI,YACJS,aAAc,aACdC,aAAc,KACdC,UAAW,CAAC,CAAEV,MAAO,KAAMrE,MAAO,OAClCgF,UAAU,KAjBhB,qBAsBF,SAACpB,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,aACFC,MAAO,cACPC,YAAa,cACbC,KAAI,aACJvE,MAAOgB,GACPwD,SAAU,SAACpB,GACTnC,GAAiBmC,EAAMqB,OAAOzE,QAGhC0E,MAAO9E,EAAgB,YAAkB,IAV3C,iBAaF,SAACgE,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,aACFC,MAAO,iBACPC,YAAa,iBACbC,KAAI,aACJvE,MAAOqB,GACPmD,SAAU,SAACpB,GACLA,EAAMqB,OAAOQ,SAASC,OACxB5D,GAAiB8B,EAAMqB,OAAOzE,QAGlC0C,QAAS,SAETgC,MAAO9E,EAAgB,YAAkB,GACzC+E,eACE,SAACC,EAAA,EAAD,CACER,GAAI,YACJS,aAAc,aACdC,aAAc,KACdC,UAAW,CAAC,CAAEV,MAAO,KAAMrE,MAAO,OAClCgF,UAAU,KApBhB,iBAyBF,SAACpB,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,qBACFC,MAAO,kBACPC,YAAa,uBACbC,KAAI,qBACJvE,MAAOuB,GACPiD,SAAU,SAACpB,GACT5B,GAAyB4B,EAAMqB,OAAOzE,QAGxC0E,MAAO9E,EAAgB,oBAA0B,IAVnD,yBAaF,SAACgE,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,UACE,SAACC,EAAA,EAAD,CACEC,GAAE,mBACFC,MAAO,gBACPC,YAAa,qBACbC,KAAI,mBACJvE,MAAOyB,GACP+C,SAAU,SAACpB,GACT1B,GAAuB0B,EAAMqB,OAAOzE,QAGtC0E,MAAO9E,EAAgB,kBAAwB,IAVjD,uBAaF,UAACgE,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,WACE,iBAAMH,UAAWtF,EAAQ0G,WAAzB,qBACA,SAACC,EAAA,EAAD,CACEC,UAAWpF,EACXqF,aAAcpF,EACdqF,UAAW,SACXb,MAAO/C,GACP6D,SAAU5D,SAGd,UAACgC,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,WACE,iBAAMH,UAAWtF,EAAQ0G,WAAzB,0BACA,SAACC,EAAA,EAAD,CACEC,UAAWlF,EACXmF,aAAclF,EACdmF,UAAW,cACXb,MAAO7C,GACP2D,SAAU1D,SAGd,UAAC8B,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAIC,UAAWtF,EAAQyF,aAAtC,WACE,iBAAMH,UAAWtF,EAAQ0G,WAAzB,4BACA,SAACC,EAAA,EAAD,CACEC,UAAWhF,EACXiF,aAAchF,EACdiF,UAAW,gBACXb,MAAO3C,GACPyD,SAAUxD,YAIhB,SAAC4B,EAAA,GAAD,CAAME,GAAI,GAAIC,UAAWtF,EAAQN,gBAAjC,UACE,SAACsH,EAAA,EAAD,CACEC,KAAK,SACLC,QAAQ,YACRC,MAAM,UACNZ,UA/NO,WACjB,GAC2C,IAAzCa,OAAOC,KAAKlG,GAAkBE,QACM,IAApC+F,OAAOC,KAAKnE,IAAa7B,QACgB,IAAzC+F,OAAOC,KAAKjE,IAAkB/B,QACY,IAA1C+F,OAAOC,KAAK/D,IAAmBjC,OAC/B,CAMA,OADAL,GAASsG,EAAAA,EAAAA,IAJuB,CAC9BC,aAAc,gBACdC,cAAe,OAGV,EAEP,OAAO,EAiNYC,GAJb,8B,sFChEZ,GAAelI,EAAAA,EAAAA,IA1SA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kCACRiI,EAAAA,IADO,IAEVC,eAAgB,CACdC,QAAS,wBAERC,EAAAA,IACAC,EAAAA,KACAC,EAAAA,EAAAA,IAAmBvI,EAAMwI,QAAQ,QAkSxC,EA/RyB,SAAC,GAAoC,IAAlChI,EAAiC,EAAjCA,QACpBgB,GAAWC,EAAAA,EAAAA,MACjB,GAAwCgH,EAAAA,EAAAA,MAAhCrH,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBAEdqH,GAAgBC,EAAAA,EAAAA,KACpB,SAACC,GAAD,OAAqBA,EAAMC,QAAQH,iBAE/BnI,GAASoI,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAqBA,EAAMC,QAAQC,cAE9D,GACEpH,EAAAA,EAAAA,WAAkB,GADpB,eAAOqH,EAAP,KAAoCC,EAApC,KAEA,GAAwBtH,EAAAA,EAAAA,WAAkB,GAA1C,eAAOuH,EAAP,KAAaC,EAAb,KACA,GACExH,EAAAA,EAAAA,YADF,eAAOyH,EAAP,KAAuBC,EAAvB,KAEA,GAAsC1H,EAAAA,EAAAA,WAAkB,GAAxD,eAAO2H,EAAP,KAAoBC,EAApB,KACA,GACE5H,EAAAA,EAAAA,WAAkB,GADpB,eAAO6H,EAAP,KAA8BC,EAA9B,MAQAnF,EAAAA,EAAAA,YAAU,WACJkF,GACFlE,EAAAA,EAAAA,OAEI,MAFJ,6BAG0BhE,GAAmB,GAH7C,oBAIMD,GAAc,GAJpB,gBAOGoE,MAAK,SAACiE,GACLT,EAA+BS,EAAIC,mBACnCN,EAAkBK,GAClBD,GAAyB,MAE1B/D,OAAM,SAACC,GACNlE,GAASmI,EAAAA,EAAAA,IAAqBjE,IAC9B8D,GAAyB,QAI9B,CAACD,IAwBJ,OACE,UAAC,EAAAK,SAAD,WACGX,GAAmB,OAAX1I,GAAmBwI,IAC1B,SAAC,EAAD,CACEvI,QAASA,EACTC,KAAMwI,EACNvI,QAvDsB,WAC5BwI,GAAQ,GACRM,GAAyB,IAsDnBjJ,OAAQA,EACRI,OAAqB,OAAdwI,QAAc,IAAdA,OAAA,EAAAA,EAAgBxI,QAAS,GAChCC,cAA4B,OAAduI,QAAc,IAAdA,OAAA,EAAAA,EAAgBvI,eAAgB,GAC9CC,WAAyB,OAAdsI,QAAc,IAAdA,OAAA,EAAAA,EAAgBtI,YAAa,GACxCI,eACgB,OAAdkI,QAAc,IAAdA,GAAAA,EAAgBlI,eACZkC,SAAQ,OAACgG,QAAD,IAACA,OAAD,EAACA,EAAgBlI,gBACzB,EAENH,QAAsB,OAAdqI,QAAc,IAAdA,OAAA,EAAAA,EAAgBrI,SAAU,GAClCC,aAA2B,OAAdoI,QAAc,IAAdA,OAAA,EAAAA,EAAgBpI,cAAe,GAC5CC,cAA4B,OAAdmI,QAAc,IAAdA,OAAA,EAAAA,EAAgBnI,eAAgB,GAC9CE,oBAAkC,OAAdiI,QAAc,IAAdA,OAAA,EAAAA,EAAgBjI,qBAAsB,GAC1DE,WAAYA,GAAc,GAC1BC,gBAAiBA,GAAmB,GACpCF,kBAAgC,OAAdgI,QAAc,IAAdA,OAAA,EAAAA,EAAgBhI,mBAAoB,GACtDG,YAA0B,OAAd6H,QAAc,IAAdA,OAAA,EAAAA,EAAgB7D,uBAAwB,GACpD/D,YAA0B,OAAd4H,QAAc,IAAdA,OAAA,EAAAA,EAAgB5D,uBAAwB,KAGvD8D,IACC,SAACQ,EAAA,EAAD,CACEC,OAAQT,EACRtE,MACEgE,EACI,iCACA,gCAENgB,YAAahB,EAA8B,UAAY,SACvDiB,WAAW,SACXtJ,QAAS,kBAAM4I,GAAe,IAC9BW,UA5DiB,WACvB,IAAMC,EAAa,CACjBR,kBAAmBX,EACnBoB,QAAQ,GAEV9E,EAAAA,EAAAA,OAEI,MAFJ,6BAG0BhE,EAH1B,oBAGqDD,EAHrD,eAII8I,GAED1E,MAAK,WACJwD,GAAgCD,GAChCS,GAAyB,GACzBF,GAAe,GACfE,GAAyB,MAE1B/D,OAAM,SAACC,GACNlE,GAASmI,EAAAA,EAAAA,IAAqBjE,QA2C5B0E,qBACE,SAACC,EAAA,EAAD,UACGtB,EACG,qGACA,iEAMZ,UAACpD,EAAA,GAAD,CAAMC,WAAS,EAAC0E,WAAY,SAA5B,WACE,SAAC3E,EAAA,GAAD,CAAMK,MAAI,EAACH,IAAE,EAAb,UACE,eAAIC,UAAWtF,EAAQ+J,aAAvB,2BAEF,SAAC5E,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,EAAf,UACE,SAAC2E,EAAA,EAAD,CACEC,gBAAiB,CAAC,UAAW,YAC7BC,QAAS3B,EACThH,MAAO,oBACPoE,GAAG,oBACHG,KAAK,oBACLC,SAAU,SAACoE,GACTrB,GAAe,IAEjBsB,YAAY,UAIjB7B,QAAkD8B,IAAnB1B,IAC9B,SAAC2B,EAAA,EAAD,CAAOhF,UAAWtF,EAAQ2H,eAA1B,UACE,UAACxC,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,SAACD,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAf,UACE,UAACF,EAAA,GAAD,CAAMC,WAAS,EAAC0E,WAAY,SAA5B,WACE,SAAC3E,EAAA,GAAD,CAAME,GAAI,EAAV,UACE,6CAEF,SAACF,EAAA,GAAD,CAAME,GAAI,EAAGkF,eAAgB,MAAO5K,UAAW,QAA/C,UACE,SAAC6K,EAAA,EAAD,CACEC,QAAS,gCACTC,KAAM,OACNC,QAAS,WACPjC,GAAQ,IAEVkC,MAAM,SAAC,MAAD,IACNzD,MAAM,UACND,QAAS,sBAKjB,UAAC/B,EAAA,GAAD,CAAMK,MAAI,EAACH,GAAI,GAAf,WACE,eAAIC,UAAWtF,EAAQ6K,WACvB,kBAAOC,MAAO,OAAd,UACE,2BACG5C,GACC,yBACE,eAAI5C,UAAWtF,EAAQ+K,YAAaC,QAAS,EAA7C,UACE,SAACC,EAAA,EAAD,SAIJ,UAAC,EAAA7B,SAAD,WAC2B,MAAxBT,EAAexI,QACd,2BACE,eAAImF,UAAWtF,EAAQkL,SAAvB,qBACA,wBAAKvC,EAAexI,WAGQ,MAA/BwI,EAAevI,eACd,2BACE,eAAIkF,UAAWtF,EAAQkL,SAAvB,6BACA,+BAAKvC,QAAL,IAAKA,OAAL,EAAKA,EAAgBvI,kBAGI,MAA5BuI,EAAetI,YACd,2BACE,eAAIiF,UAAWtF,EAAQkL,SAAvB,0BACA,+BAAKvC,QAAL,IAAKA,OAAL,EAAKA,EAAgBtI,eAGS,MAAjCsI,EAAelI,iBACd,2BACE,eAAI6E,UAAWtF,EAAQkL,SAAvB,kCAGA,+BAAKvC,QAAL,IAAKA,OAAL,EAAKA,EAAgBlI,oBAGa,MAArCkI,EAAejI,qBACd,2BACE,eAAI4E,UAAWtF,EAAQkL,SAAvB,oCAGA,+BAAKvC,QAAL,IAAKA,OAAL,EAAKA,EAAgBjI,wBAGW,MAAnCiI,EAAehI,mBACd,2BACE,eAAI2E,UAAWtF,EAAQkL,SAAvB,kCAGA,+BAAKvC,QAAL,IAAKA,OAAL,EAAKA,EAAgBhI,sBAGC,MAAzBgI,EAAerI,QACdqI,EAAerI,OAAOe,OAAS,IAC7B,iCACE,yBACE,yBACE,wCAGJ,yBACE,eAAIiE,UAAWtF,EAAQkL,SAAvB,UACE,SAACC,EAAA,EAAD,CACEC,QAASzC,EAAerI,OACxB+K,WAAW,kBAMQ,MAA9B1C,EAAepI,aACdoI,EAAepI,YAAYc,OAAS,IAClC,iCACE,yBACE,yBACE,6CAGJ,yBACE,eAAIiE,UAAWtF,EAAQkL,SAAvB,UACE,SAACC,EAAA,EAAD,CACEC,QAASzC,EAAepI,YACxB8K,WAAW,uBAMiB,MAAvC1C,EAAe7D,uBACd,2BACE,eAAIQ,UAAWtF,EAAQkL,SAAvB,2BACA,+BAAKvC,QAAL,IAAKA,OAAL,EAAKA,EAAgB7D,0BAGe,MAAvC6D,EAAe5D,uBACd,2BACE,eAAIO,UAAWtF,EAAQkL,SAAvB,8BACA,yBACGI,EAAAA,EAAAA,IAAS,OACR3C,QADQ,IACRA,OADQ,EACRA,EAAgB5D,sBAChB,QAKwB,MAA/B4D,EAAenI,cACdmI,EAAenI,aAAaa,OAAS,IACnC,2BACE,4CACA,eAAIiE,UAAWtF,EAAQkL,SAAvB,UACE,SAACC,EAAA,EAAD,CACEC,QAASzC,EAAenI,aACxB6K,WAAW","sources":["screens/Console/Tenants/TenantDetails/EditTenantMonitoringModal.tsx","screens/Console/Tenants/TenantDetails/TenantMonitoring.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { Button, Grid } from \"@mui/material\";\nimport api from \"../../../../common/api\";\nimport { IKeyValue, ITenant } from \"../ListTenants/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IEditTenantMonitoringProps {\n  tenant: ITenant;\n  classes: any;\n  open: boolean;\n  onClose: (shouldReload: boolean) => void;\n  image: string;\n  sidecarImage: string;\n  initImage: string;\n  labels: IKeyValue[];\n  annotations: IKeyValue[];\n  nodeSelector: IKeyValue[];\n  diskCapacityGB: number;\n  serviceAccountName: string;\n  tenantName: string;\n  tenantNamespace: string;\n  storageClassName: string;\n  cpuRequest: string;\n  memRequest: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    ...modalBasic,\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst EditTenantMonitoringModal = ({\n  tenant,\n  classes,\n  open,\n  onClose,\n  image,\n  sidecarImage,\n  initImage,\n  labels,\n  annotations,\n  nodeSelector,\n  diskCapacityGB,\n  serviceAccountName,\n  storageClassName,\n  tenantName,\n  tenantNamespace,\n  cpuRequest,\n  memRequest,\n}: IEditTenantMonitoringProps) => {\n  const dispatch = useAppDispatch();\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [newLabels, setNewLabels] = useState<IKeyValue[]>(\n    labels.length > 0 ? [...labels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newAnnotations, setNewAnnotations] = useState<IKeyValue[]>(\n    annotations.length > 0 ? [...annotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newNodeSelector, setNewNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector.length > 0 ? [...nodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newImage, setNewImage] = useState<string>(image);\n  const [newSidecarImage, setNewSidecarImage] = useState<string>(sidecarImage);\n  const [newInitImage, setNewInitImage] = useState<string>(initImage);\n  const [newDiskCapacityGB, setNewDiskCapacityGB] = useState<string>(\n    diskCapacityGB.toString()\n  );\n  const [newCPURequest, setNewCPURequest] = useState<string>(cpuRequest);\n  const [newMemRequest, setNewMemRequest] = useState<string>(\n    memRequest\n      ? Math.floor(parseInt(memRequest, 10) / 1000000000).toString()\n      : \"\"\n  );\n  const [newServiceAccountName, setNewServiceAccountName] =\n    useState<string>(serviceAccountName);\n  const [newStorageClassName, setNewStorageClassName] =\n    useState<string>(storageClassName);\n\n  const [labelsError, setLabelsError] = useState<any>({});\n  const [annotationsError, setAnnotationsError] = useState<any>({});\n  const [nodeSelectorError, setNodeSelectorError] = useState<any>({});\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  useEffect(() => {\n    let tenantMonitoringValidation: IValidation[] = [];\n\n    tenantMonitoringValidation.push({\n      fieldKey: `image`,\n      required: false,\n      value: newImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `sidecarImage`,\n      required: false,\n      value: newSidecarImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `initImage`,\n      required: false,\n      value: newInitImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `diskCapacityGB`,\n      required: true,\n      value: newDiskCapacityGB as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage: \"Must be an integer between 0 and 10\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `newCPURequest`,\n      required: false,\n      value: newCPURequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage: \"Must be an integer between 0 and 10\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `newMemRequest`,\n      required: false,\n      value: newMemRequest as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage: \"Must be an integer between 0 and 10\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `serviceAccountName`,\n      required: false,\n      value: newServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n    tenantMonitoringValidation.push({\n      fieldKey: `storageClassName`,\n      required: false,\n      value: newStorageClassName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid storage class name\",\n    });\n\n    const commonVal = commonFormValidation(tenantMonitoringValidation);\n    setValidationErrors(commonVal);\n  }, [\n    newImage,\n    newSidecarImage,\n    newInitImage,\n    newDiskCapacityGB,\n    newServiceAccountName,\n    newStorageClassName,\n    newCPURequest,\n    newMemRequest,\n    setValidationErrors,\n  ]);\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(labelsError).length !== 0 ||\n      Object.keys(annotationsError).length !== 0 ||\n      Object.keys(nodeSelectorError).length !== 0\n    ) {\n      let err: ErrorResponseHandler = {\n        errorMessage: \"Invalid entry\",\n        detailedError: \"\",\n      };\n      dispatch(setModalErrorSnackMessage(err));\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitMonitoringInfo = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    api\n      .invoke(\n        \"PUT\",\n        `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/monitoring`,\n        {\n          labels: trim(newLabels),\n          annotations: trim(newAnnotations),\n          nodeSelector: trim(newNodeSelector),\n          image: newImage,\n          sidecarImage: newSidecarImage,\n          initImage: newInitImage,\n          diskCapacityGB: newDiskCapacityGB,\n          serviceAccountName: newServiceAccountName,\n          storageClassName: newStorageClassName,\n          monitoringCPURequest: newCPURequest,\n          monitoringMemRequest: newMemRequest + \"Gi\",\n        }\n      )\n      .then(() => {\n        onClose(true);\n      })\n      .catch((err: ErrorResponseHandler) => {});\n  };\n\n  return (\n    <ModalWrapper\n      onClose={() => onClose(true)}\n      modalOpen={open}\n      title=\"Edit Monitoring Configuration\"\n    >\n      <form noValidate autoComplete=\"off\" onSubmit={submitMonitoringInfo}>\n        <Grid container>\n          <Grid xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`image`}\n                label={\"Image\"}\n                placeholder={\"quay.io/prometheus/prometheus:latest\"}\n                name={`image`}\n                value={newImage}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewImage(event.target.value);\n                }}\n                key={`image`}\n                error={validationErrors[`image`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`sidecarImage`}\n                label={\"Sidecar Image\"}\n                placeholder={\"library/alpine:latest\"}\n                name={`sidecarImage`}\n                value={newSidecarImage}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewSidecarImage(event.target.value);\n                }}\n                key={`sidecarImage`}\n                error={validationErrors[`sidecarImage`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`initImage`}\n                label={\"Init Image\"}\n                placeholder={\"library/busybox:1.33.1\"}\n                name={`initImage`}\n                value={newInitImage}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewInitImage(event.target.value);\n                }}\n                key={`initImage`}\n                error={validationErrors[`initImage`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`diskCapacityGB`}\n                label={\"Disk Capacity\"}\n                placeholder={\"Disk Capacity\"}\n                name={`diskCapacityGB`}\n                value={newDiskCapacityGB}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewDiskCapacityGB(event.target.value);\n                }}\n                key={`diskCapacityGB`}\n                error={validationErrors[`diskCapacityGB`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`cpuRequest`}\n                label={\"CPU Request\"}\n                placeholder={\"CPU Request\"}\n                name={`cpuRequest`}\n                value={newCPURequest}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewCPURequest(event.target.value);\n                }}\n                key={`cpuRequest`}\n                error={validationErrors[`cpuRequest`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`memRequest`}\n                label={\"Memory Request\"}\n                placeholder={\"Memory request\"}\n                name={`memRequest`}\n                value={newMemRequest}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  if (event.target.validity.valid) {\n                    setNewMemRequest(event.target.value);\n                  }\n                }}\n                pattern={\"[0-9]*\"}\n                key={`memRequest`}\n                error={validationErrors[`memRequest`] || \"\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`serviceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Service Account Name\"}\n                name={`serviceAccountName`}\n                value={newServiceAccountName}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewServiceAccountName(event.target.value);\n                }}\n                key={`serviceAccountName`}\n                error={validationErrors[`serviceAccountName`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`storageClassName`}\n                label={\"Storage Class\"}\n                placeholder={\"Storage Class Name\"}\n                name={`storageClassName`}\n                value={newStorageClassName}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewStorageClassName(event.target.value);\n                }}\n                key={`storageClassName`}\n                error={validationErrors[`storageClassName`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newLabels}\n                setNewValues={setNewLabels}\n                paramName={\"Labels\"}\n                error={labelsError}\n                setError={setLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newAnnotations}\n                setNewValues={setNewAnnotations}\n                paramName={\"Annotations\"}\n                error={annotationsError}\n                setError={setAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newNodeSelector}\n                setNewValues={setNewNodeSelector}\n                paramName={\"Node Selector\"}\n                error={nodeSelectorError}\n                setError={setNodeSelectorError}\n              />\n            </Grid>\n          </Grid>\n          <Grid xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!checkValid()}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(EditTenantMonitoringModal);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { DialogContentText } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport { ITenantMonitoringStruct } from \"../ListTenants/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport EditTenantMonitoringModal from \"./EditTenantMonitoringModal\";\n\nimport api from \"../../../../common/api\";\nimport { EditIcon } from \"../../../../icons\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport KeyPairView from \"./KeyPairView\";\nimport { niceBytes } from \"../../../../common/utils\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport Loader from \"../../Common/Loader/Loader\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useParams } from \"react-router-dom\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\n\ninterface ITenantMonitoring {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    ...actionsTray,\n    ...searchField,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst TenantMonitoring = ({ classes }: ITenantMonitoring) => {\n  const dispatch = useAppDispatch();\n  const { tenantName, tenantNamespace } = useParams();\n\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n\n  const [prometheusMonitoringEnabled, setPrometheusMonitoringEnabled] =\n    useState<boolean>(false);\n  const [edit, setEdit] = useState<boolean>(false);\n  const [monitoringInfo, setMonitoringInfo] =\n    useState<ITenantMonitoringStruct>();\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n  const [refreshMonitoringInfo, setRefreshMonitoringInfo] =\n    useState<boolean>(true);\n\n  const onCloseEditAndRefresh = () => {\n    setEdit(false);\n    setRefreshMonitoringInfo(true);\n  };\n\n  useEffect(() => {\n    if (refreshMonitoringInfo) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace || \"\"}/tenants/${\n            tenantName || \"\"\n          }/monitoring`\n        )\n        .then((res: ITenantMonitoringStruct) => {\n          setPrometheusMonitoringEnabled(res.prometheusEnabled);\n          setMonitoringInfo(res);\n          setRefreshMonitoringInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setErrorSnackMessage(err));\n          setRefreshMonitoringInfo(false);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refreshMonitoringInfo]);\n\n  const togglePrometheus = () => {\n    const configInfo = {\n      prometheusEnabled: prometheusMonitoringEnabled,\n      toggle: true,\n    };\n    api\n      .invoke(\n        \"PUT\",\n        `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/monitoring`,\n        configInfo\n      )\n      .then(() => {\n        setPrometheusMonitoringEnabled(!prometheusMonitoringEnabled);\n        setRefreshMonitoringInfo(true);\n        setConfirmOpen(false);\n        setRefreshMonitoringInfo(true);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  };\n\n  return (\n    <Fragment>\n      {edit && tenant !== null && prometheusMonitoringEnabled && (\n        <EditTenantMonitoringModal\n          classes={classes}\n          open={edit}\n          onClose={onCloseEditAndRefresh}\n          tenant={tenant}\n          image={monitoringInfo?.image || \"\"}\n          sidecarImage={monitoringInfo?.sidecarImage || \"\"}\n          initImage={monitoringInfo?.initImage || \"\"}\n          diskCapacityGB={\n            monitoringInfo?.diskCapacityGB\n              ? parseInt(monitoringInfo?.diskCapacityGB)\n              : 5\n          }\n          labels={monitoringInfo?.labels || []}\n          annotations={monitoringInfo?.annotations || []}\n          nodeSelector={monitoringInfo?.nodeSelector || []}\n          serviceAccountName={monitoringInfo?.serviceAccountName || \"\"}\n          tenantName={tenantName || \"\"}\n          tenantNamespace={tenantNamespace || \"\"}\n          storageClassName={monitoringInfo?.storageClassName || \"\"}\n          cpuRequest={monitoringInfo?.monitoringCPURequest || \"\"}\n          memRequest={monitoringInfo?.monitoringMemRequest || \"\"}\n        />\n      )}\n      {confirmOpen && (\n        <ConfirmDialog\n          isOpen={confirmOpen}\n          title={\n            prometheusMonitoringEnabled\n              ? \"Disable Prometheus monitoring?\"\n              : \"Enable Prometheus monitoring?\"\n          }\n          confirmText={prometheusMonitoringEnabled ? \"Disable\" : \"Enable\"}\n          cancelText=\"Cancel\"\n          onClose={() => setConfirmOpen(false)}\n          onConfirm={togglePrometheus}\n          confirmationContent={\n            <DialogContentText>\n              {prometheusMonitoringEnabled\n                ? \"Disabling monitoring will erase any custom values you have used to configure Prometheus monitoring\"\n                : \"Prometheus monitoring will be enabled with default values\"}\n            </DialogContentText>\n          }\n        />\n      )}\n\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Monitoring</h1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={prometheusMonitoringEnabled}\n            value={\"monitoring_status\"}\n            id=\"monitoring-status\"\n            name=\"monitoring-status\"\n            onChange={(e) => {\n              setConfirmOpen(true);\n            }}\n            description=\"\"\n          />\n        </Grid>\n      </Grid>\n      {prometheusMonitoringEnabled && monitoringInfo !== undefined && (\n        <Paper className={classes.paperContainer}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Grid container alignItems={\"center\"}>\n                <Grid xs={8}>\n                  <h3>Configuration</h3>\n                </Grid>\n                <Grid xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n                  <RBIconButton\n                    tooltip={\"Edit Monitoring configuration\"}\n                    text={\"Edit\"}\n                    onClick={() => {\n                      setEdit(true);\n                    }}\n                    icon={<EditIcon />}\n                    color=\"primary\"\n                    variant={\"contained\"}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <Loader />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      {monitoringInfo.image != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Image:</td>\n                          <td>{monitoringInfo.image}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.sidecarImage != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Sidecar Image:</td>\n                          <td>{monitoringInfo?.sidecarImage}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.initImage != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Init Image:</td>\n                          <td>{monitoringInfo?.initImage}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.diskCapacityGB != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            Disk Capacity (GB):\n                          </td>\n                          <td>{monitoringInfo?.diskCapacityGB}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.serviceAccountName != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            Service Account Name:\n                          </td>\n                          <td>{monitoringInfo?.serviceAccountName}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.storageClassName != null && (\n                        <tr>\n                          <td className={classes.titleCol}>\n                            Storage Class Name:\n                          </td>\n                          <td>{monitoringInfo?.storageClassName}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.labels != null &&\n                        monitoringInfo.labels.length > 0 && (\n                          <>\n                            <tr>\n                              <td>\n                                <h4>Labels</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td className={classes.titleCol}>\n                                <KeyPairView\n                                  records={monitoringInfo.labels}\n                                  recordName=\"Labels\"\n                                />\n                              </td>\n                            </tr>\n                          </>\n                        )}\n                      {monitoringInfo.annotations != null &&\n                        monitoringInfo.annotations.length > 0 && (\n                          <>\n                            <tr>\n                              <td>\n                                <h4>Annotations</h4>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td className={classes.titleCol}>\n                                <KeyPairView\n                                  records={monitoringInfo.annotations}\n                                  recordName=\"Annotations\"\n                                />\n                              </td>\n                            </tr>\n                          </>\n                        )}\n                      {monitoringInfo.monitoringCPURequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>CPU Request:</td>\n                          <td>{monitoringInfo?.monitoringCPURequest}</td>\n                        </tr>\n                      )}\n                      {monitoringInfo.monitoringMemRequest != null && (\n                        <tr>\n                          <td className={classes.titleCol}>Memory Request:</td>\n                          <td>\n                            {niceBytes(\n                              monitoringInfo?.monitoringMemRequest,\n                              true\n                            )}\n                          </td>\n                        </tr>\n                      )}\n                      {monitoringInfo.nodeSelector != null &&\n                        monitoringInfo.nodeSelector.length > 0 && (\n                          <tr>\n                            <h4>Node Selector:</h4>\n                            <td className={classes.titleCol}>\n                              <KeyPairView\n                                records={monitoringInfo.nodeSelector}\n                                recordName=\"Node Selector\"\n                              />\n                            </td>\n                          </tr>\n                        )}\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n            </Grid>\n          </Grid>\n        </Paper>\n      )}\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantMonitoring);\n"],"names":["withStyles","theme","createStyles","buttonContainer","textAlign","modalBasic","modalStyleUtils","formFieldStyles","tenant","classes","open","onClose","image","sidecarImage","initImage","labels","annotations","nodeSelector","diskCapacityGB","serviceAccountName","storageClassName","tenantName","tenantNamespace","cpuRequest","memRequest","dispatch","useAppDispatch","useState","validationErrors","setValidationErrors","length","key","value","newLabels","setNewLabels","newAnnotations","setNewAnnotations","newNodeSelector","setNewNodeSelector","newImage","setNewImage","newSidecarImage","setNewSidecarImage","newInitImage","setNewInitImage","toString","newDiskCapacityGB","setNewDiskCapacityGB","newCPURequest","setNewCPURequest","Math","floor","parseInt","newMemRequest","setNewMemRequest","newServiceAccountName","setNewServiceAccountName","newStorageClassName","setNewStorageClassName","labelsError","setLabelsError","annotationsError","setAnnotationsError","nodeSelectorError","setNodeSelectorError","trim","x","retval","i","push","useEffect","tenantMonitoringValidation","fieldKey","required","pattern","customPatternMessage","commonVal","commonFormValidation","ModalWrapper","modalOpen","title","noValidate","autoComplete","onSubmit","event","preventDefault","api","monitoringCPURequest","monitoringMemRequest","then","catch","err","Grid","container","xs","className","modalFormScrollable","item","formFieldRow","InputBoxWrapper","id","label","placeholder","name","onChange","target","error","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","validity","valid","inputLabel","KeyPairEdit","newValues","setNewValues","paramName","setError","Button","type","variant","color","Object","keys","setModalErrorSnackMessage","errorMessage","detailedError","checkValid","tenantDetailsStyles","paperContainer","padding","actionsTray","searchField","containerForHeader","spacing","useParams","loadingTenant","useSelector","state","tenants","tenantInfo","prometheusMonitoringEnabled","setPrometheusMonitoringEnabled","edit","setEdit","monitoringInfo","setMonitoringInfo","confirmOpen","setConfirmOpen","refreshMonitoringInfo","setRefreshMonitoringInfo","res","prometheusEnabled","setErrorSnackMessage","Fragment","ConfirmDialog","isOpen","confirmText","cancelText","onConfirm","configInfo","toggle","confirmationContent","DialogContentText","alignItems","sectionTitle","FormSwitchWrapper","indicatorLabels","checked","e","description","undefined","Paper","justifyContent","RBIconButton","tooltip","text","onClick","icon","hrClass","width","centerAlign","colSpan","Loader","titleCol","KeyPairView","records","recordName","niceBytes"],"sourceRoot":""}