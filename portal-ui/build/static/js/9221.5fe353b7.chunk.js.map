{"version":3,"file":"static/js/9221.5fe353b7.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Users/BulkAddToGroup.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport GroupsSelectors from \"./GroupsSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { AddMembersToGroupIcon } from \"../../../icons\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\n\ninterface IAddToGroup {\n  open: boolean;\n  checkedUsers: any;\n  closeModalAndRefresh: any;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst BulkAddToGroup = ({\n  open,\n  checkedUsers,\n  closeModalAndRefresh,\n  classes,\n}: IAddToGroup) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [saving, isSaving] = useState<boolean>(false);\n  const [accepted, setAccepted] = useState<boolean>(false);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n\n  //Effects\n  useEffect(() => {\n    if (saving) {\n      if (selectedGroups.length > 0) {\n        api\n          .invoke(\"PUT\", \"/api/v1/users-groups-bulk\", {\n            groups: selectedGroups,\n            users: checkedUsers,\n          })\n          .then(() => {\n            isSaving(false);\n            setAccepted(true);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            isSaving(false);\n            dispatch(setModalErrorSnackMessage(err));\n          });\n      } else {\n        isSaving(false);\n        dispatch(\n          setModalErrorSnackMessage({\n            errorMessage: \"You need to select at least one group to assign\",\n            detailedError: \"\",\n          })\n        );\n      }\n    }\n  }, [\n    saving,\n    isSaving,\n    closeModalAndRefresh,\n    selectedGroups,\n    checkedUsers,\n    dispatch,\n  ]);\n\n  //Fetch Actions\n  const setSaving = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    isSaving(true);\n  };\n\n  const resetForm = () => {\n    setSelectedGroups([]);\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh(accepted);\n      }}\n      title={\n        accepted\n          ? \"The selected users were added to the following groups.\"\n          : \"Add Users to Group\"\n      }\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      {accepted ? (\n        <React.Fragment>\n          <Grid container>\n            <PredefinedList\n              label={\"Groups\"}\n              content={selectedGroups.join(\", \")}\n            />\n            <PredefinedList label={\"Users\"} content={checkedUsers.join(\", \")} />\n          </Grid>\n          <br />\n          <br />\n          <br />\n        </React.Fragment>\n      ) : (\n        <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\n          <Grid container>\n            <Grid item xs={12} className={classes.modalFormScrollable}>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <PredefinedList\n                  label={\"Selected Users\"}\n                  content={checkedUsers.join(\", \")}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <GroupsSelectors\n                  selectedGroups={selectedGroups}\n                  setSelectedGroups={setSelectedGroups}\n                />\n              </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.modalButtonBar}>\n              <Button\n                type=\"button\"\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={resetForm}\n              >\n                Clear\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={saving || selectedGroups.length < 1}\n              >\n                Save\n              </Button>\n            </Grid>\n            {saving && (\n              <Grid item xs={12}>\n                <LinearProgress />\n              </Grid>\n            )}\n          </Grid>\n        </form>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(BulkAddToGroup);\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","modalStyleUtils","formFieldStyles","open","checkedUsers","closeModalAndRefresh","dispatch","useAppDispatch","useState","saving","isSaving","accepted","setAccepted","selectedGroups","setSelectedGroups","useEffect","length","api","groups","users","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","modalOpen","onClose","title","titleIcon","container","join","noValidate","autoComplete","onSubmit","event","preventDefault","modalFormScrollable","formFieldRow","modalButtonBar","type","variant","color","onClick","disabled"],"sourceRoot":""}