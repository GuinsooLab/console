{"version":3,"file":"static/js/7659.28807a59.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/NotificationEndpoints/CustomForms/ResetConfigurationModal.tsx","screens/Console/NotificationEndpoints/CustomForms/EditConfiguration.tsx","screens/Console/Configurations/ConfigurationPanels/ConfigurationForm.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx","screens/Console/NotificationEndpoints/ConfTargetGeneric.tsx"],"sourcesContent":["// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface CommentBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: 14,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      flexWrap: \"wrap\",\n      display: \"flex\",\n    },\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    cssOutlinedInput: {\n      borderColor: \"#EAEAEA\",\n      padding: 16,\n    },\n    rootContainer: {\n      \"& .MuiOutlinedInput-inputMultiline\": {\n        ...fieldBasic.inputLabel,\n        fontSize: 13,\n        minHeight: 150,\n      },\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"#07193E\",\n        borderWidth: 1,\n      },\n      \"& textarea\": {\n        color: \"#07193E\",\n        fontSize: 13,\n        fontWeight: 600,\n        \"&:placeholder\": {\n          color: \"#858585\",\n          opacity: 1,\n          fontWeight: 400,\n        },\n      },\n    },\n  });\n\nconst CommentBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  classes,\n}: CommentBoxProps) => {\n  let inputProps: any = { \"data-index\": index };\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fieldContainer} ${\n          error !== \"\" ? classes.errorInField : \"\"\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <TextField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            multiline\n            rows={5}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              classes: {\n                notchedOutline: classes.cssOutlinedInput,\n                root: classes.rootContainer,\n              },\n            }}\n            variant=\"outlined\"\n          />\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CommentBoxWrapper);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...deleteDialogStyles,\n  });\n\ninterface IResetConfiguration {\n  classes: any;\n  configurationName: string;\n  closeResetModalAndRefresh: (reloadConfiguration: boolean) => void;\n\n  resetOpen: boolean;\n}\n\nconst ResetConfigurationModal = ({\n  classes,\n  configurationName,\n  closeResetModalAndRefresh,\n  resetOpen,\n}: IResetConfiguration) => {\n  const dispatch = useAppDispatch();\n  const [resetLoading, setResetLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (resetLoading) {\n      api\n        .invoke(\"POST\", `/api/v1/configs/${configurationName}/reset`)\n        .then((res) => {\n          setResetLoading(false);\n          closeResetModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setResetLoading(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [closeResetModalAndRefresh, configurationName, resetLoading, dispatch]);\n\n  const resetConfiguration = () => {\n    setResetLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Restore Defaults`}\n      confirmText={\"Yes, Reset Configuration\"}\n      isOpen={resetOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={resetLoading}\n      onConfirm={resetConfiguration}\n      onClose={() => {\n        closeResetModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {resetLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to restore these configurations to default\n            values?\n            <br />\n            <b className={classes.wrapText}>\n              Please note that this may cause your system to not be accessible\n            </b>\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nexport default withStyles(styles)(ResetConfigurationModal);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Box, Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport api from \"../../../../common/api\";\nimport ConfTargetGeneric from \"../ConfTargetGeneric\";\n\nimport {\n  fieldBasic,\n  settingsCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  fieldsConfigurations,\n  removeEmptyFields,\n} from \"../../Configurations/utils\";\nimport {\n  IConfigurationElement,\n  IElementValue,\n} from \"../../Configurations/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport ResetConfigurationModal from \"./ResetConfigurationModal\";\nimport {\n  setErrorSnackMessage,\n  setServerNeedsRestart,\n} from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...settingsCommon,\n    settingsFormContainer: {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr\",\n      gridGap: \"10px\",\n    },\n  });\n\ninterface IAddNotificationEndpointProps {\n  selectedConfiguration: IConfigurationElement;\n  classes: any;\n  className?: string;\n}\n\nconst EditConfiguration = ({\n  selectedConfiguration,\n  classes,\n  className = \"\",\n}: IAddNotificationEndpointProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  //Local States\n  const [valuesObj, setValueObj] = useState<IElementValue[]>([]);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [loadingConfig, setLoadingConfig] = useState<boolean>(true);\n  const [configValues, setConfigValues] = useState<IElementValue[]>([]);\n  const [resetConfigurationOpen, setResetConfigurationOpen] =\n    useState<boolean>(false);\n  //Effects\n  useEffect(() => {\n    if (loadingConfig) {\n      const configId = get(selectedConfiguration, \"configuration_id\", false);\n\n      if (configId) {\n        api\n          .invoke(\"GET\", `/api/v1/configs/${configId}`)\n          .then((res) => {\n            const keyVals = get(res, \"key_values\", []);\n            setConfigValues(keyVals);\n            setLoadingConfig(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingConfig(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n\n        return;\n      }\n      setLoadingConfig(false);\n    }\n  }, [loadingConfig, selectedConfiguration, dispatch]);\n\n  useEffect(() => {\n    if (saving) {\n      const payload = {\n        key_values: removeEmptyFields(valuesObj),\n      };\n      api\n        .invoke(\n          \"PUT\",\n          `/api/v1/configs/${selectedConfiguration.configuration_id}`,\n          payload\n        )\n        .then((res) => {\n          setSaving(false);\n          dispatch(setServerNeedsRestart(res.restart));\n\n          navigate(\"/settings\");\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setSaving(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [saving, dispatch, selectedConfiguration, valuesObj, navigate]);\n\n  //Fetch Actions\n  const submitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    setSaving(true);\n  };\n\n  const onValueChange = useCallback(\n    (newValue: IElementValue[]) => {\n      setValueObj(newValue);\n    },\n    [setValueObj]\n  );\n\n  const continueReset = (restart: boolean) => {\n    setResetConfigurationOpen(false);\n    dispatch(setServerNeedsRestart(restart));\n    if (restart) {\n      setLoadingConfig(true);\n    }\n  };\n\n  return (\n    <Fragment>\n      {resetConfigurationOpen && (\n        <ResetConfigurationModal\n          configurationName={selectedConfiguration.configuration_id}\n          closeResetModalAndRefresh={continueReset}\n          resetOpen={resetConfigurationOpen}\n        />\n      )}\n      {loadingConfig ? (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      ) : (\n        <Box\n          sx={{\n            padding: \"15px\",\n            height: \"100%\",\n          }}\n        >\n          <form\n            noValidate\n            onSubmit={submitForm}\n            className={className}\n            style={{\n              height: \"100%\",\n              display: \"flex\",\n              flexFlow: \"column\",\n            }}\n          >\n            <Grid item xs={12} className={classes.settingsFormContainer}>\n              <ConfTargetGeneric\n                fields={\n                  fieldsConfigurations[selectedConfiguration.configuration_id]\n                }\n                onChange={onValueChange}\n                defaultVals={configValues}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                paddingTop: \"15px \",\n                textAlign: \"right\" as const,\n                maxHeight: \"60px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"flex-end\",\n              }}\n            >\n              <Button\n                type=\"button\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                sx={{\n                  padding: {\n                    xs: \"3px\", //avoid wrapping on smaller screens\n                    md: \"20px\",\n                  },\n                }}\n                onClick={() => {\n                  setResetConfigurationOpen(true);\n                }}\n              >\n                Restore Defaults\n              </Button>\n              &nbsp; &nbsp;\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={saving}\n              >\n                Save\n              </Button>\n            </Grid>\n          </form>\n        </Box>\n      )}\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(EditConfiguration);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Grid from \"@mui/material/Grid\";\nimport { configurationElements } from \"../utils\";\nimport EditConfiguration from \"../../NotificationEndpoints/CustomForms/EditConfiguration\";\n\nconst ConfigurationsList = () => {\n  const { pathname = \"\" } = useLocation();\n\n  const configName = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n\n  const validActiveConfig = configurationElements.find(\n    (element) => element.configuration_id === configName\n  );\n  const containerClassName = `${configName}`;\n  return (\n    <Grid\n      item\n      xs={12}\n      sx={{\n        height: \"100%\",\n        //LDAP and api forms have longer labels\n        \"& .identity_ldap, .api\": {\n          \"& label\": {\n            minWidth: 220,\n            marginRight: 0,\n          },\n        },\n      }}\n    >\n      {validActiveConfig && (\n        <EditConfiguration\n          className={`${containerClassName}`}\n          selectedConfiguration={validActiveConfig}\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default ConfigurationsList;\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { InputLabel, Tooltip } from \"@mui/material\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport InputBoxWrapper from \"../InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  classes: any;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst styles = (theme: Theme) => {\n  return createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputWithBorder: {\n      border: \"1px solid #EAEAEA\",\n      padding: 15,\n      height: 150,\n      overflowY: \"auto\",\n      position: \"relative\",\n      marginTop: 15,\n      flex: 1,\n    },\n    inputBoxSpacer: {\n      marginBottom: 7,\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      minWidth: 162,\n    },\n  });\n};\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n  classes,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    debouncedOnChange();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", 0);\n    updatedElement[index] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  // Debounce for On Change\n  const debouncedOnChange = debounce(() => {\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChange(elementsString);\n  }, 500);\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <div className={classes.inputBoxSpacer}>\n        <InputBoxWrapper\n          id={`${name}-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentElements[index]}\n          onChange={onChangeElement}\n          index={index}\n          key={`csv-${name}-${index.toString()}`}\n          placeholder={commonPlaceholder}\n          overlayIcon={\n            index === currentElements.length - 1 ? <AddIcon /> : null\n          }\n          overlayAction={() => {\n            addEmptyLine(currentElements);\n          }}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n        <Grid\n          item\n          xs={12}\n          className={`${withBorder ? classes.inputWithBorder : \"\"}`}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default withStyles(styles)(CSVMultiSelector);\n","// This file is part of GuinsooLab Console Server\n// Copyright (c) 2020-2022 GuinsooLab, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { IElementValue, KVField } from \"../Configurations/types\";\nimport {\n  formFieldStyles,\n  modalBasic,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport CSVMultiSelector from \"../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\nimport CommentBoxWrapper from \"../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\n\ninterface IConfGenericProps {\n  onChange: (newValue: IElementValue[]) => void;\n  fields: KVField[];\n  defaultVals?: IElementValue[];\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    formFieldRow: {\n      ...formFieldStyles.formFieldRow,\n    },\n    ...modalBasic,\n  });\n\n// Function to get defined values,\n//we make this because the backed sometimes don't return all the keys when there is an initial configuration\nexport const valueDef = (\n  key: string,\n  type: string,\n  defaults: IElementValue[]\n) => {\n  let defValue = type === \"on|off\" ? \"off\" : \"\";\n\n  if (defaults.length > 0) {\n    const storedConfig = defaults.find((element) => element.key === key);\n\n    if (storedConfig) {\n      defValue = storedConfig.value;\n    }\n  }\n\n  return defValue;\n};\n\nconst ConfTargetGeneric = ({\n  onChange,\n  fields,\n  defaultVals,\n  classes,\n}: IConfGenericProps) => {\n  const [valueHolder, setValueHolder] = useState<IElementValue[]>([]);\n  const fieldsElements = !fields ? [] : fields;\n  const defValList = !defaultVals ? [] : defaultVals;\n\n  // Effect to create all the values to hold\n  useEffect(() => {\n    const values: IElementValue[] = [];\n    fields.forEach((field) => {\n      const stateInsert: IElementValue = {\n        key: field.name,\n        value: valueDef(field.name, field.type, defValList),\n      };\n      values.push(stateInsert);\n    });\n\n    setValueHolder(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, defaultVals]);\n\n  useEffect(() => {\n    onChange(valueHolder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueHolder]);\n\n  const setValueElement = (key: string, value: string, index: number) => {\n    const valuesDup = [...valueHolder];\n    valuesDup[index] = { key, value };\n\n    setValueHolder(valuesDup);\n  };\n\n  const fieldDefinition = (field: KVField, item: number) => {\n    switch (field.type) {\n      case \"on|off\":\n        const value = valueHolder[item] ? valueHolder[item].value : \"off\";\n\n        return (\n          <FormSwitchWrapper\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const value = e.target.checked ? \"on\" : \"off\";\n              setValueElement(field.name, value, item);\n            }}\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            value={\"switch_on\"}\n            tooltip={field.tooltip}\n            checked={value === \"on\"}\n          />\n        );\n      case \"csv\":\n        return (\n          <CSVMultiSelector\n            elements={valueHolder[item] ? valueHolder[item].value : \"\"}\n            label={field.label}\n            name={field.name}\n            onChange={(value: string) =>\n              setValueElement(field.name, value, item)\n            }\n            tooltip={field.tooltip}\n            commonPlaceholder={field.placeholder}\n            withBorder={true}\n          />\n        );\n      case \"comment\":\n        return (\n          <CommentBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={valueHolder[item] ? valueHolder[item].value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            placeholder={field.placeholder}\n          />\n        );\n      default:\n        return (\n          <InputBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={valueHolder[item] ? valueHolder[item].value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            multiline={!!field.multiline}\n            placeholder={field.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Grid container>\n      <Grid xs={12} item className={classes.fieldBox}>\n        {fieldsElements.map((field, item) => (\n          <Grid item xs={12} key={field.name} className={classes.formFieldRow}>\n            {fieldDefinition(field, item)}\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(ConfTargetGeneric);\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","inputLabel","fontSize","margin","alignItems","paddingTop","flexWrap","display","textBoxContainer","flexGrow","position","cssOutlinedInput","borderColor","padding","rootContainer","minHeight","borderWidth","color","fontWeight","opacity","label","onChange","value","id","name","disabled","tooltip","index","error","required","placeholder","classes","inputProps","item","xs","className","fieldContainer","errorInField","htmlFor","tooltipContainer","title","placement","fullWidth","multiline","rows","helperText","InputLabelProps","shrink","InputProps","notchedOutline","root","variant","wrapText","maxWidth","whiteSpace","wordWrap","deleteDialogStyles","configurationName","closeResetModalAndRefresh","resetOpen","dispatch","useAppDispatch","useState","resetLoading","setResetLoading","useEffect","api","then","res","catch","err","setErrorSnackMessage","ConfirmDialog","confirmText","isOpen","titleIcon","isLoading","onConfirm","onClose","confirmationContent","LinearProgress","DialogContentText","settingsCommon","settingsFormContainer","gridTemplateColumns","gridGap","selectedConfiguration","navigate","useNavigate","valuesObj","setValueObj","saving","setSaving","loadingConfig","setLoadingConfig","configValues","setConfigValues","resetConfigurationOpen","setResetConfigurationOpen","configId","get","keyVals","payload","key_values","removeEmptyFields","configuration_id","setServerNeedsRestart","restart","onValueChange","useCallback","newValue","Fragment","Grid","Box","sx","height","noValidate","onSubmit","event","preventDefault","style","flexFlow","ConfTargetGeneric","fields","fieldsConfigurations","defaultVals","textAlign","maxHeight","justifyContent","Button","type","md","onClick","useLocation","pathname","configName","substring","lastIndexOf","validActiveConfig","configurationElements","element","containerClassName","minWidth","marginRight","inputWithBorder","border","overflowY","marginTop","flex","inputBoxSpacer","marginBottom","elements","commonPlaceholder","withBorder","currentElements","setCurrentElements","bottomList","createRef","length","elementsSplit","split","push","refScroll","current","scrollIntoView","firstUpdate","useRef","useLayoutEffect","debouncedOnChange","onChangeElement","e","persist","updatedElement","target","debounce","elementsString","filter","trim","join","inputs","map","InputBoxWrapper","toString","overlayIcon","AddIcon","overlayAction","elementsUp","cpList","addEmptyLine","InputLabel","Tooltip","HelpIcon","ref","valueDef","key","defaults","defValue","storedConfig","find","formFieldStyles","formFieldRow","modalBasic","valueHolder","setValueHolder","fieldsElements","defValList","values","forEach","field","stateInsert","setValueElement","valuesDup","fieldDefinition","FormSwitchWrapper","checked","CommentBoxWrapper","container","fieldBox"],"sourceRoot":""}