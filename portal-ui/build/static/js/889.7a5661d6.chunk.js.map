{"version":3,"file":"static/js/889.7a5661d6.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddReplicationModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, SelectChangeEvent } from \"@mui/material\";\nimport get from \"lodash/get\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalStyleUtils,\n  spacingUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { BucketReplicationRule, BulkReplicationResponse } from \"../types\";\n\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../../common/api\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { getBytes, k8sScalarUnitsExcluding } from \"../../../../common/utils\";\nimport QueryMultiSelector from \"../../Common/FormComponents/QueryMultiSelector/QueryMultiSelector\";\nimport { BucketReplicationIcon } from \"../../../../icons\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IReplicationModal {\n  open: boolean;\n  closeModalAndRefresh: () => any;\n  classes: any;\n  bucketName: string;\n\n  setReplicationRules: BucketReplicationRule[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    multiContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    sizeFactorContainer: {\n      \"& label\": {\n        display: \"none\",\n      },\n      \"& div:first-child\": {\n        marginBottom: 0,\n        \"@media (max-width: 600px)\": {\n          marginTop: \"7px\",\n        },\n      },\n    },\n    ...spacingUtils,\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalStyleUtils,\n    modalFormScrollable: {\n      ...modalStyleUtils.modalFormScrollable,\n      paddingRight: 10,\n    },\n  });\n\nconst AddReplicationModal = ({\n  open,\n  closeModalAndRefresh,\n  classes,\n  bucketName,\n\n  setReplicationRules,\n}: IReplicationModal) => {\n  const dispatch = useAppDispatch();\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [priority, setPriority] = useState<string>(\"1\");\n  const [accessKey, setAccessKey] = useState<string>(\"\");\n  const [secretKey, setSecretKey] = useState<string>(\"\");\n  const [targetURL, setTargetURL] = useState<string>(\"\");\n  const [targetStorageClass, setTargetStorageClass] = useState<string>(\"\");\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [targetBucket, setTargetBucket] = useState<string>(\"\");\n  const [region, setRegion] = useState<string>(\"\");\n  const [useTLS, setUseTLS] = useState<boolean>(true);\n  const [repDeleteMarker, setRepDeleteMarker] = useState<boolean>(true);\n  const [repDelete, setRepDelete] = useState<boolean>(true);\n  const [metadataSync, setMetadataSync] = useState<boolean>(true);\n  const [tags, setTags] = useState<string>(\"\");\n  const [replicationMode, setReplicationMode] = useState<string>(\"async\");\n  const [bandwidthScalar, setBandwidthScalar] = useState<string>(\"100\");\n  const [bandwidthUnit, setBandwidthUnit] = useState<string>(\"Gi\");\n  const [healthCheck, setHealthCheck] = useState<string>(\"60\");\n\n  useEffect(() => {\n    if (setReplicationRules.length === 0) {\n      setPriority(\"1\");\n      return;\n    }\n\n    const greatestValue = setReplicationRules.reduce((prevAcc, currValue) => {\n      if (currValue.priority > prevAcc) {\n        return currValue.priority;\n      }\n      return prevAcc;\n    }, 0);\n\n    const nextPriority = greatestValue + 1;\n    setPriority(nextPriority.toString());\n  }, [setReplicationRules]);\n\n  const addRecord = () => {\n    const replicate = [\n      {\n        originBucket: bucketName,\n        destinationBucket: targetBucket,\n      },\n    ];\n\n    const hc = parseInt(healthCheck);\n\n    const endURL = `${useTLS ? \"https://\" : \"http://\"}${targetURL}`;\n\n    const remoteBucketsInfo = {\n      accessKey: accessKey,\n      secretKey: secretKey,\n      targetURL: endURL,\n      region: region,\n      bucketsRelation: replicate,\n      syncMode: replicationMode,\n      bandwidth:\n        replicationMode === \"async\"\n          ? parseInt(getBytes(bandwidthScalar, bandwidthUnit, true))\n          : 0,\n      healthCheckPeriod: hc,\n      prefix: prefix,\n      tags: tags,\n      replicateDeleteMarkers: repDeleteMarker,\n      replicateDeletes: repDelete,\n      priority: parseInt(priority),\n      storageClass: targetStorageClass,\n      replicateMetadata: metadataSync,\n    };\n\n    api\n      .invoke(\"POST\", \"/api/v1/buckets-replication\", remoteBucketsInfo)\n      .then((response: BulkReplicationResponse) => {\n        setAddLoading(false);\n\n        const states = get(response, \"replicationState\", []);\n\n        if (states.length > 0) {\n          const itemVal = states[0];\n\n          setAddLoading(false);\n\n          if (itemVal.errorString && itemVal.errorString !== \"\") {\n            setModalErrorSnackMessage({\n              errorMessage: itemVal.errorString,\n              detailedError: \"\",\n            });\n            return;\n          }\n\n          closeModalAndRefresh();\n\n          return;\n        }\n        setModalErrorSnackMessage({\n          errorMessage: \"No changes applied\",\n          detailedError: \"\",\n        });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Set Bucket Replication\"\n      titleIcon={<BucketReplicationIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setAddLoading(true);\n          addRecord();\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"priority\"\n                name=\"priority\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  if (e.target.validity.valid) {\n                    setPriority(e.target.value);\n                  }\n                }}\n                label=\"Priority\"\n                value={priority}\n                pattern={\"[0-9]*\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"targetURL\"\n                name=\"targetURL\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setTargetURL(e.target.value);\n                }}\n                placeholder=\"play.min.io\"\n                label=\"Target URL\"\n                value={targetURL}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <FormSwitchWrapper\n                checked={useTLS}\n                id=\"useTLS\"\n                name=\"useTLS\"\n                label=\"Use TLS\"\n                onChange={(e) => {\n                  setUseTLS(e.target.checked);\n                }}\n                value=\"yes\"\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"accessKey\"\n                name=\"accessKey\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccessKey(e.target.value);\n                }}\n                label=\"Access Key\"\n                value={accessKey}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"secretKey\"\n                name=\"secretKey\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setSecretKey(e.target.value);\n                }}\n                label=\"Secret Key\"\n                value={secretKey}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"targetBucket\"\n                name=\"targetBucket\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setTargetBucket(e.target.value);\n                }}\n                label=\"Target Bucket\"\n                value={targetBucket}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"region\"\n                name=\"region\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setRegion(e.target.value);\n                }}\n                label=\"Region\"\n                value={region}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <SelectWrapper\n                id=\"replication_mode\"\n                name=\"replication_mode\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  setReplicationMode(e.target.value as string);\n                }}\n                label=\"Replication Mode\"\n                value={replicationMode}\n                options={[\n                  { label: \"Asynchronous\", value: \"async\" },\n                  { label: \"Synchronous\", value: \"sync\" },\n                ]}\n              />\n            </Grid>\n\n            {replicationMode === \"async\" && (\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <div className={classes.multiContainer}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"bandwidth_scalar\"\n                    name=\"bandwidth_scalar\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.validity.valid) {\n                        setBandwidthScalar(e.target.value as string);\n                      }\n                    }}\n                    label=\"Bandwidth\"\n                    value={bandwidthScalar}\n                    min=\"0\"\n                    pattern={\"[0-9]*\"}\n                    overlayObject={\n                      <InputUnitMenu\n                        id={\"quota_unit\"}\n                        onUnitChange={(newValue) => {\n                          setBandwidthUnit(newValue);\n                        }}\n                        unitSelected={bandwidthUnit}\n                        unitsList={k8sScalarUnitsExcluding([\"Ki\"])}\n                        disabled={false}\n                      />\n                    }\n                  />\n                </div>\n              </Grid>\n            )}\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"healthCheck\"\n                name=\"healthCheck\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setHealthCheck(e.target.value as string);\n                }}\n                label=\"Health Check Duration\"\n                value={healthCheck}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              className={`${classes.spacerTop} ${classes.formFieldRow}`}\n            >\n              <InputBoxWrapper\n                id=\"storageClass\"\n                name=\"storageClass\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setTargetStorageClass(e.target.value);\n                }}\n                placeholder=\"STANDARD_IA,REDUCED_REDUNDANCY etc\"\n                label=\"Storage Class\"\n                value={targetStorageClass}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  Object Filters\n                </legend>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"prefix\"\n                    name=\"prefix\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setPrefix(e.target.value);\n                    }}\n                    placeholder=\"prefix\"\n                    label=\"Prefix\"\n                    value={prefix}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <QueryMultiSelector\n                    name=\"tags\"\n                    label=\"Tags\"\n                    elements={\"\"}\n                    onChange={(vl: string) => {\n                      setTags(vl);\n                    }}\n                    keyPlaceholder=\"Tag Key\"\n                    valuePlaceholder=\"Tag Value\"\n                    withBorder\n                  />\n                </Grid>\n              </fieldset>\n            </Grid>\n            <Grid item xs={12}>\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  Replication Options\n                </legend>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <FormSwitchWrapper\n                    checked={metadataSync}\n                    id=\"metadatataSync\"\n                    name=\"metadatataSync\"\n                    label=\"Metadata Sync\"\n                    onChange={(e) => {\n                      setMetadataSync(e.target.checked);\n                    }}\n                    value={metadataSync}\n                    description={\"Metadata Sync\"}\n                  />\n                  <FormSwitchWrapper\n                    checked={repDeleteMarker}\n                    id=\"deleteMarker\"\n                    name=\"deleteMarker\"\n                    label=\"Delete Marker\"\n                    onChange={(e) => {\n                      setRepDeleteMarker(e.target.checked);\n                    }}\n                    value={repDeleteMarker}\n                    description={\"Replicate soft deletes\"}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <FormSwitchWrapper\n                    checked={repDelete}\n                    id=\"repDelete\"\n                    name=\"repDelete\"\n                    label=\"Deletes\"\n                    onChange={(e) => {\n                      setRepDelete(e.target.checked);\n                    }}\n                    value={repDelete}\n                    description={\"Replicate versioned deletes\"}\n                  />\n                </Grid>\n              </fieldset>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              color=\"primary\"\n              disabled={addLoading}\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={addLoading}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(AddReplicationModal);\n"],"names":["withStyles","theme","createStyles","multiContainer","display","alignItems","sizeFactorContainer","marginBottom","marginTop","spacingUtils","createTenantCommon","formFieldStyles","modalStyleUtils","modalFormScrollable","paddingRight","open","closeModalAndRefresh","classes","bucketName","setReplicationRules","dispatch","useAppDispatch","useState","addLoading","setAddLoading","priority","setPriority","accessKey","setAccessKey","secretKey","setSecretKey","targetURL","setTargetURL","targetStorageClass","setTargetStorageClass","prefix","setPrefix","targetBucket","setTargetBucket","region","setRegion","useTLS","setUseTLS","repDeleteMarker","setRepDeleteMarker","repDelete","setRepDelete","metadataSync","setMetadataSync","tags","setTags","replicationMode","setReplicationMode","bandwidthScalar","setBandwidthScalar","bandwidthUnit","setBandwidthUnit","healthCheck","setHealthCheck","useEffect","length","greatestValue","reduce","prevAcc","currValue","toString","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","replicate","originBucket","destinationBucket","hc","parseInt","endURL","remoteBucketsInfo","bucketsRelation","syncMode","bandwidth","getBytes","healthCheckPeriod","replicateDeleteMarkers","replicateDeletes","storageClass","replicateMetadata","api","then","response","states","get","itemVal","errorString","setModalErrorSnackMessage","errorMessage","detailedError","catch","err","addRecord","container","item","xs","className","formFieldRow","id","name","onChange","target","validity","valid","value","label","pattern","placeholder","checked","options","type","min","overlayObject","onUnitChange","newValue","unitSelected","unitsList","k8sScalarUnitsExcluding","disabled","spacerTop","fieldGroup","descriptionText","elements","vl","keyPlaceholder","valuePlaceholder","withBorder","description","modalButtonBar","variant","color","onClick"],"sourceRoot":""}