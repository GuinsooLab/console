{"version":3,"file":"static/js/343.e9d1a353.chunk.js","mappings":"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","sources":["screens/Console/Account/ChangePasswordModal.tsx","screens/Console/Account/Account.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport {\n  containerForHeader,\n  formFieldStyles,\n  modalStyleUtils,\n  spacingUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ChangePasswordRequest } from \"../Buckets/types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport { ChangePasswordIcon } from \"../../../icons\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n    ...spacingUtils,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\ninterface IChangePasswordProps {\n  classes: any;\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst ChangePassword = ({\n  classes,\n  open,\n  closeModal,\n}: IChangePasswordProps) => {\n  const dispatch = useAppDispatch();\n  const [currentPassword, setCurrentPassword] = useState<string>(\"\");\n  const [newPassword, setNewPassword] = useState<string>(\"\");\n  const [reNewPassword, setReNewPassword] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\n\n  const changePassword = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newPassword !== reNewPassword) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"New passwords don't match\",\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n\n    if (newPassword.length < 8) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Passwords must be at least 8 characters long\",\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n\n    let request: ChangePasswordRequest = {\n      current_secret_key: currentPassword,\n      new_secret_key: newPassword,\n    };\n\n    api\n      .invoke(\"POST\", \"/api/v1/account/change-password\", request)\n      .then(() => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  return open ? (\n    <ModalWrapper\n      title={`Change Password for ${userLoggedIn}`}\n      modalOpen={open}\n      onClose={() => {\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      }}\n      titleIcon={<ChangePasswordIcon />}\n    >\n      <div>\n        This will change your Console password. Please note your new password\n        down, as it will be required to log into Console after this session.\n      </div>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          changePassword(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"current-password\"\n                name=\"current-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setCurrentPassword(event.target.value);\n                }}\n                label=\"Current Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={currentPassword}\n                overlayAction={() => setShowPassword(!showPassword)}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"new-password\"\n                name=\"new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewPassword(event.target.value);\n                }}\n                label=\"New Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={newPassword}\n                overlayAction={() => setShowPassword(!showPassword)}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"re-new-password\"\n                name=\"re-new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setReNewPassword(event.target.value);\n                }}\n                label=\"Type New Password Again\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={reNewPassword}\n                overlayAction={() => setShowPassword(!showPassword)}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={\n                loading ||\n                !(\n                  currentPassword.length > 0 &&\n                  newPassword.length > 0 &&\n                  reNewPassword.length > 0\n                )\n              }\n            >\n              Save\n            </Button>\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  ) : null;\n};\n\nexport default withStyles(styles)(ChangePassword);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport api from \"../../../common/api\";\nimport { Box } from \"@mui/material\";\n\nimport {\n  AccountIcon,\n  AddIcon,\n  DeleteIcon,\n  PasswordKeyIcon,\n} from \"../../../icons\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport { stringSort } from \"../../../utils/sortFunctions\";\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ChangePasswordModal from \"./ChangePasswordModal\";\nimport HelpBox from \"../../../common/HelpBox\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport SearchBox from \"../Common/SearchBox\";\nimport withSuspense from \"../Common/Components/withSuspense\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_PAGES,\n  IAM_SCOPES,\n} from \"../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../common/SecureComponent\";\nimport RBIconButton from \"../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { selectSAs } from \"../Configurations/utils\";\nimport DeleteMultipleServiceAccounts from \"../Users/DeleteMultipleServiceAccounts\";\nimport ServiceAccountPolicy from \"./ServiceAccountPolicy\";\nimport { setErrorSnackMessage, setSnackBarMessage } from \"../../../systemSlice\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { selFeatures } from \"../consoleSlice\";\nimport { useAppDispatch } from \"../../../store\";\n\nconst DeleteServiceAccount = withSuspense(\n  React.lazy(() => import(\"./DeleteServiceAccount\"))\n);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...actionsTray,\n    ...searchField,\n    searchField: {\n      ...searchField.searchField,\n      marginRight: \"auto\",\n      maxWidth: 380,\n    },\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  })\n);\n\nconst Account = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const classes = useStyles();\n  const features = useSelector(selFeatures);\n\n  const [records, setRecords] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedServiceAccount, setSelectedServiceAccount] = useState<\n    string | null\n  >(null);\n  const [changePasswordModalOpen, setChangePasswordModalOpen] =\n    useState<boolean>(false);\n  const [selectedSAs, setSelectedSAs] = useState<string[]>([]);\n  const [deleteMultipleOpen, setDeleteMultipleOpen] = useState<boolean>(false);\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n\n  const userIDP = (features && features.includes(\"external-idp\")) || false;\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/service-accounts`)\n        .then((res: string[]) => {\n          const serviceAccounts = res.sort(stringSort);\n\n          setLoading(false);\n          setRecords(serviceAccounts);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  }, [loading, setLoading, setRecords, dispatch]);\n\n  const fetchRecords = () => {\n    setLoading(true);\n  };\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      fetchRecords();\n    }\n  };\n\n  const closeDeleteMultipleModalAndRefresh = (refresh: boolean) => {\n    setDeleteMultipleOpen(false);\n    if (refresh) {\n      dispatch(setSnackBarMessage(`Service accounts deleted successfully.`));\n      setSelectedSAs([]);\n      setLoading(true);\n    }\n  };\n\n  const policyModalOpen = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setPolicyOpen(true);\n  };\n\n  const selectAllItems = () => {\n    if (selectedSAs.length === records.length) {\n      setSelectedSAs([]);\n      return;\n    }\n    setSelectedSAs(records);\n  };\n\n  const closePolicyModal = () => {\n    setPolicyOpen(false);\n    setLoading(true);\n  };\n\n  const confirmDeleteServiceAccount = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setDeleteOpen(true);\n  };\n\n  const tableActions = [\n    { type: \"view\", onClick: policyModalOpen },\n    { type: \"delete\", onClick: confirmDeleteServiceAccount },\n  ];\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <React.Fragment>\n      {deleteOpen && (\n        <DeleteServiceAccount\n          deleteOpen={deleteOpen}\n          selectedServiceAccount={selectedServiceAccount}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {deleteMultipleOpen && (\n        <DeleteMultipleServiceAccounts\n          deleteOpen={deleteMultipleOpen}\n          selectedSAs={selectedSAs}\n          closeDeleteModalAndRefresh={closeDeleteMultipleModalAndRefresh}\n        />\n      )}\n\n      {policyOpen && (\n        <ServiceAccountPolicy\n          open={policyOpen}\n          selectedAccessKey={selectedServiceAccount}\n          closeModalAndRefresh={closePolicyModal}\n        />\n      )}\n      <ChangePasswordModal\n        open={changePasswordModalOpen}\n        closeModal={() => setChangePasswordModalOpen(false)}\n      />\n      <PageHeader label=\"Service Accounts\" />\n      <PageLayout>\n        <Grid item={true} xs={12} className={classes.actionsTray}>\n          <SearchBox\n            placeholder={\"Search Service Accounts\"}\n            onChange={setFilter}\n            overrideClass={classes.searchField}\n            value={filter}\n          />\n\n          <Box\n            sx={{\n              display: \"flex\",\n            }}\n          >\n            {\" \"}\n            <RBIconButton\n              tooltip={\"Delete Selected\"}\n              onClick={() => {\n                setDeleteMultipleOpen(true);\n              }}\n              text={\"Delete Selected\"}\n              icon={<DeleteIcon />}\n              color=\"secondary\"\n              disabled={selectedSAs.length === 0}\n              variant={\"outlined\"}\n            />\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_CREATE_USER]}\n              resource={CONSOLE_UI_RESOURCE}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <RBIconButton\n                onClick={() => setChangePasswordModalOpen(true)}\n                text={`Change Password`}\n                icon={<PasswordKeyIcon />}\n                color={\"primary\"}\n                variant={\"outlined\"}\n                disabled={userIDP}\n              />\n            </SecureComponent>\n            <RBIconButton\n              onClick={(e) => {\n                navigate(`${IAM_PAGES.ACCOUNT_ADD}`);\n              }}\n              text={`Create service account`}\n              icon={<AddIcon />}\n              color={\"primary\"}\n              variant={\"contained\"}\n            />\n          </Box>\n        </Grid>\n\n        <Grid item xs={12} className={classes.tableBlock}>\n          <TableWrapper\n            isLoading={loading}\n            records={filteredRecords}\n            entityName={\"Service Accounts\"}\n            idField={\"\"}\n            columns={[{ label: \"Service Account\", elementKey: \"\" }]}\n            itemActions={tableActions}\n            selectedItems={selectedSAs}\n            onSelect={(e) => selectSAs(e, setSelectedSAs, selectedSAs)}\n            onSelectAll={selectAllItems}\n          />\n        </Grid>\n        <Grid item xs={12} marginTop={\"15px\"}>\n          <HelpBox\n            title={\"Learn more about SERVICE ACCOUNTS\"}\n            iconComponent={<AccountIcon />}\n            help={\n              <Fragment>\n                MinIO service accounts are child identities of an authenticated\n                MinIO user, including externally managed identities. Each\n                service account inherits its privileges based on the policies\n                attached to it’s parent user or those groups in which the parent\n                user has membership. Service accounts also support an optional\n                inline policy which further restricts access to a subset of\n                actions and resources available to the parent user.\n                <br />\n                <br />\n                You can learn more at our{\" \"}\n                <a\n                  href=\"https://docs.min.io/minio/baremetal/security/minio-identity-management/user-management.html?ref=con#service-accounts\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  documentation\n                </a>\n                .\n              </Fragment>\n            }\n          />\n        </Grid>\n      </PageLayout>\n    </React.Fragment>\n  );\n};\n\nexport default Account;\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","spacingUtils","containerForHeader","spacing","classes","open","closeModal","dispatch","useAppDispatch","useState","currentPassword","setCurrentPassword","newPassword","setNewPassword","reNewPassword","setReNewPassword","loading","setLoading","showPassword","setShowPassword","userLoggedIn","localStorage","getItem","ModalWrapper","title","modalOpen","onClose","titleIcon","noValidate","autoComplete","onSubmit","e","event","preventDefault","length","setModalErrorSnackMessage","errorMessage","detailedError","request","current_secret_key","new_secret_key","api","then","catch","err","changePassword","Grid","container","item","xs","className","modalFormScrollable","formFieldRow","InputBoxWrapper","id","name","onChange","target","value","label","type","overlayAction","overlayIcon","VisibilityOff","RemoveRedEye","modalButtonBar","Button","variant","color","disabled","LinearProgress","DeleteServiceAccount","withSuspense","React","useStyles","makeStyles","actionsTray","searchField","marginRight","maxWidth","tableStyles","navigate","useNavigate","features","useSelector","selFeatures","records","setRecords","filter","setFilter","deleteOpen","setDeleteOpen","selectedServiceAccount","setSelectedServiceAccount","changePasswordModalOpen","setChangePasswordModalOpen","selectedSAs","setSelectedSAs","deleteMultipleOpen","setDeleteMultipleOpen","policyOpen","setPolicyOpen","userIDP","includes","useEffect","fetchRecords","res","serviceAccounts","sort","stringSort","setErrorSnackMessage","tableActions","onClick","filteredRecords","elementItem","toLowerCase","closeDeleteModalAndRefresh","refresh","DeleteMultipleServiceAccounts","setSnackBarMessage","ServiceAccountPolicy","selectedAccessKey","closeModalAndRefresh","ChangePasswordModal","PageHeader","PageLayout","SearchBox","placeholder","overrideClass","Box","sx","display","RBIconButton","tooltip","text","icon","SecureComponent","scopes","IAM_SCOPES","resource","CONSOLE_UI_RESOURCE","matchAll","errorProps","IAM_PAGES","tableBlock","TableWrapper","isLoading","entityName","idField","columns","elementKey","itemActions","selectedItems","onSelect","selectSAs","onSelectAll","marginTop","HelpBox","iconComponent","help","Fragment","href","rel"],"sourceRoot":""}